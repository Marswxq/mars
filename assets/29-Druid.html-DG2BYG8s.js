import{_ as d,c as a,d as e,o as i}from"./app-CKtXyHQO.js";const r={};function o(l,t){return i(),a("div",null,t[0]||(t[0]=[e('<h1 id="druid-连接池" tabindex="-1"><a class="header-anchor" href="#druid-连接池"><span>Druid 连接池</span></a></h1><h1 id="配置项说明" tabindex="-1"><a class="header-anchor" href="#配置项说明"><span>配置项说明</span></a></h1><h2 id="配置项说明-1" tabindex="-1"><a class="header-anchor" href="#配置项说明-1"><span>配置项说明</span></a></h2><table><thead><tr><th>配置项名称</th><th>缺省值</th><th>说明</th><th>java set方法定义</th></tr></thead><tbody><tr><td>connectProperties</td><td>{}</td><td>map方式放入自定义的key和value，在Filter等地方可以获取该信息进行相应逻辑控制</td><td>public void com.alibaba.druid.pool.DruidDataSource.setConnectProperties(java.util.Properties)</td></tr><tr><td>connectionProperties</td><td>null</td><td>字符串方式放入自定义的key和value，键值对用分号隔开，比如“a=b;c=d”，传入空白字符串表示清空属性，实际拆分字符串后赋值给connectProperties，在Filter等地方可以获取该信息进行相应逻辑控制</td><td>public void com.alibaba.druid.pool.DruidAbstractDataSource.setConnectionProperties(java.lang.String)</td></tr><tr><td>connectTimeout</td><td>0</td><td>新增的控制创建连接时的socket连接最大等待超时，单位是毫秒，默认0表示永远等待，工作原理是在创建连接时将该值设置到对应数据库驱动的属性信息中由其JDBC驱动进行控制</td><td>public void com.alibaba.druid.pool.DruidAbstractDataSource.setConnectTimeout(int)</td></tr><tr><td>connectionInitSqls</td><td>[]</td><td>数组方式定义物理连接初始化的时候执行的1到多条sql语句，比如连接MySQL数据库使用低版本驱动的情况下，想使用utf8mb4,则可以配置sql为： set NAMES &#39;utf8mb4&#39;</td><td>public void com.alibaba.druid.pool.DruidAbstractDataSource.setConnectionInitSqls(java.util.Collection)</td></tr><tr><td>createScheduler</td><td>null</td><td>可以使用定时线程池方式异步创建连接，比起默认的单线程创建连接方式，经实际验证这种更可靠</td><td>public void com.alibaba.druid.pool.DruidAbstractDataSource.setCreateScheduler(java.util.concurrent.ScheduledExecutorService)</td></tr><tr><td>dbType</td><td>null</td><td>对于不是Druid自动适配支持的db类型，可以强制指定db类型，字符串值来自com.alibaba.druid.DbType的枚举名</td><td>public void com.alibaba.druid.pool.DruidAbstractDataSource.setDbType(java.lang.String)</td></tr><tr><td>destroyScheduler</td><td>null</td><td>可以使用定时线程池方式异步创建连接，比起默认的单线程创建连接方式，经实际验证这种更可靠</td><td>public void com.alibaba.druid.pool.DruidAbstractDataSource.setDestroyScheduler(java.util.concurrent.ScheduledExecutorService)</td></tr><tr><td>driverClassName</td><td>根据url自动识别</td><td>这一项可配可不配，如果不配置druid会根据url自动识别dbType，然后选择相应的driverClassName</td><td>com.alibaba.druid.pool.DruidAbstractDataSource.setDriverClassName(String)</td></tr><tr><td>exceptionSorter</td><td>null</td><td>当数据库抛出一些不可恢复的异常时，抛弃连接</td><td>public void com.alibaba.druid.pool.DruidAbstractDataSource.setExceptionSorter(com.alibaba.druid.pool.ExceptionSorter)</td></tr><tr><td>failFast</td><td>false</td><td>null</td><td>public void com.alibaba.druid.pool.DruidAbstractDataSource.setFailFast(boolean)</td></tr><tr><td>filters</td><td></td><td>属性类型是逗号隔开的字符串，通过别名的方式配置扩展插件，插件别名列表请参考druid jar包中的 /META-INF/druid-filter.properties,常用的插件有： 监控统计用的filter:stat 日志用的filter:log4j 防御sql注入的filter:wall</td><td>com.alibaba.druid.pool.DruidAbstractDataSource.setFilters(String)</td></tr><tr><td>initialSize</td><td>0</td><td>初始化数据源时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时</td><td>public void com.alibaba.druid.pool.DruidAbstractDataSource.setInitialSize(int)</td></tr><tr><td>keepAlive</td><td>false</td><td>连接池中的minIdle数量以内的连接，空闲时间超过minEvictableIdleTimeMillis，则会执行keepAlive操作。实际项目中建议配置成true</td><td>public void com.alibaba.druid.pool.DruidDataSource.setKeepAlive(boolean)</td></tr><tr><td>keepAliveBetweenTimeMillis</td><td>120000</td><td>null</td><td>public void com.alibaba.druid.pool.DruidAbstractDataSource.setKeepAliveBetweenTimeMillis(long)</td></tr><tr><td>logAbandoned</td><td>false</td><td>在开启removeAbandoned为true的情况，可以开启该设置，druid在销毁未及时关闭的连接时，则会输出日志信息，便于定位连接泄露问题</td><td>public void com.alibaba.druid.pool.DruidAbstractDataSource.setLogAbandoned(boolean)</td></tr><tr><td>loginTimeout</td><td></td><td>单位是秒，底层调用DriverManager全局静态方法</td><td>java.sql.DriverManager.setLoginTimeout(int)</td></tr><tr><td>maxActive</td><td>8</td><td>连接池最大活跃连接数量，当连接数量达到该值时，再获取新连接时，将处于等待状态，直到有连接被释放，才能借用成功</td><td>public void com.alibaba.druid.pool.DruidDataSource.setMaxActive(int)</td></tr><tr><td>maxEvictableIdleTimeMillis</td><td>25200000</td><td>null</td><td>public void com.alibaba.druid.pool.DruidAbstractDataSource.setMaxEvictableIdleTimeMillis(long)</td></tr><tr><td>maxIdle</td><td>8</td><td>已经彻底废弃，配置了也没效果，以maxActive为准</td><td>public void com.alibaba.druid.pool.DruidAbstractDataSource.setMaxIdle(int)</td></tr><tr><td>maxOpenPreparedStatements</td><td>10</td><td>null</td><td>public void com.alibaba.druid.pool.DruidAbstractDataSource.setMaxOpenPreparedStatements(int)</td></tr><tr><td>maxPoolPreparedStatementPerConnectionSize</td><td>10</td><td>要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100</td><td>public void com.alibaba.druid.pool.DruidAbstractDataSource.setMaxPoolPreparedStatementPerConnectionSize(int)</td></tr><tr><td>maxWait</td><td>-1</td><td>获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。</td><td>public void com.alibaba.druid.pool.DruidAbstractDataSource.setMaxWait(long)</td></tr><tr><td>minEvictableIdleTimeMillis</td><td>1800000</td><td>连接保持空闲而不被驱逐的最小时间</td><td>public void com.alibaba.druid.pool.DruidAbstractDataSource.setMinEvictableIdleTimeMillis(long)</td></tr><tr><td>minIdle</td><td>0</td><td>连接池最小空闲数量</td><td>public void com.alibaba.druid.pool.DruidAbstractDataSource.setMinIdle(int)</td></tr><tr><td>name</td><td>DataSource-****</td><td>配置这个属性的意义在于，如果存在多个数据源，监控的时候可以通过名字来区分开来。如果没有配置，将会生成一个名字，格式是：&quot;DataSource-&quot; + System.identityHashCode(this). 另外配置此属性至少在1.0.5版本中是不起作用的，强行设置name会出错。。</td><td>public void com.alibaba.druid.pool.DruidAbstractDataSource.setName(java.lang.String)</td></tr><tr><td>numTestsPerEvictionRun</td><td>3</td><td>不再使用，已经彻底废弃，一个DruidDataSource只支持一个EvictionRun</td><td>public void com.alibaba.druid.pool.DruidAbstractDataSource.setNumTestsPerEvictionRun(int)</td></tr><tr><td>password</td><td>null</td><td>连接数据库的密码。如果你不希望密码直接写在配置文件中，可以使用passwordCallback进行配置，或者使用ConfigFilter。</td><td>public void com.alibaba.druid.pool.DruidAbstractDataSource.setPassword(java.lang.String)</td></tr><tr><td>passwordCallback</td><td>null</td><td>可以自定义实现定制的PasswordCallback，然后实现定制的密码解密效果</td><td>public void com.alibaba.druid.pool.DruidAbstractDataSource.setPasswordCallback(javax.security.auth.callback.PasswordCallback)</td></tr><tr><td>phyTimeoutMillis</td><td>-1</td><td>强制回收物理连接的最大超时时长，大于0的情况下才生效，当物理创建之后存活的时长超过该值时，该连接会强制销毁，便于重新创建新连接，建议可以配置成7小时的毫秒值，比如25200000，这样可以规避MySQL的8小时连接断开问题</td><td>public void com.alibaba.druid.pool.DruidAbstractDataSource.setPhyTimeoutMillis(long)</td></tr><tr><td>poolPreparedStatements</td><td>false</td><td>是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。</td><td>public void com.alibaba.druid.pool.DruidDataSource.setPoolPreparedStatements(boolean)</td></tr><tr><td>proxyFilters</td><td></td><td>类型是List&lt;com.alibaba.druid.filter.Filter&gt;，如果同时配置了filters和proxyFilters，是组合关系，并非替换关系</td><td>com.alibaba.druid.pool.DruidAbstractDataSource.setProxyFilters(List)</td></tr><tr><td>queryTimeout</td><td>0</td><td>控制查询结果的最大超时，单位是秒，大于0才生效，最终底层调用是java.sql.Statement.setQueryTimeout(int)</td><td>public void com.alibaba.druid.pool.DruidAbstractDataSource.setQueryTimeout(int)</td></tr><tr><td>removeAbandoned</td><td>false</td><td>是否回收泄露的连接,默认不开启，建议只在测试环境设置未开启，利用测试环境发现业务代码中未正常关闭连接的情况</td><td>public void com.alibaba.druid.pool.DruidAbstractDataSource.setRemoveAbandoned(boolean)</td></tr><tr><td>removeAbandonedTimeoutMillis</td><td>300000</td><td>开启回收泄露连接的最大超时，默认300秒表示连接被借出超过5分钟后，且removeAbandoned开启的情况下，强制关闭该泄露连接</td><td>public void com.alibaba.druid.pool.DruidAbstractDataSource.setRemoveAbandonedTimeoutMillis(long)</td></tr><tr><td>socketTimeout</td><td>0</td><td>新增的控制创建连接时的socket最大读超时，单位是毫秒，默认0表示永远等待，配置成10000则表示db操作如果在10秒内未返回应答，将抛出异常，工作原理是在创建连接时将该值设置到对应数据库驱动的属性信息中由其JDBC驱动进行控制</td><td>public void com.alibaba.druid.pool.DruidAbstractDataSource.setSocketTimeout(int)</td></tr><tr><td>testOnBorrow</td><td>false</td><td>申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能，其实一般情况下都可以开启，只有性能要求极其高且连接使用很频繁的情况下才有必要禁用。</td><td>public void com.alibaba.druid.pool.DruidAbstractDataSource.setTestOnBorrow(boolean)</td></tr><tr><td>testOnReturn</td><td>false</td><td>归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能，这个一般不需要开启。</td><td>public void com.alibaba.druid.pool.DruidAbstractDataSource.setTestOnReturn(boolean)</td></tr><tr><td>testWhileIdle</td><td>true</td><td>建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。</td><td>public void com.alibaba.druid.pool.DruidAbstractDataSource.setTestWhileIdle(boolean)</td></tr><tr><td>timeBetweenEvictionRunsMillis</td><td>60000</td><td>有两个含义： 1) Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。 2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明</td><td>public void com.alibaba.druid.pool.DruidAbstractDataSource.setTimeBetweenEvictionRunsMillis(long)</td></tr><tr><td>transactionQueryTimeout</td><td>0</td><td>控制查询结果的最大超时，单位是秒，大于0才生效，最终是在开启事务的情况下底层调用java.sql.Statement.setQueryTimeout(int)</td><td>public void com.alibaba.druid.pool.DruidAbstractDataSource.setTransactionQueryTimeout(int)</td></tr><tr><td>url</td><td></td><td>连接数据库的url，不同数据库不一样。例如： mysql : jdbc:mysql://10.20.153.104:3306/druid2 oracle : jdbc:oracle:thin:@10.20.149.85:1521:ocnauto</td><td>com.alibaba.druid.pool.DruidAbstractDataSource.setUrl(String)</td></tr><tr><td>username</td><td>null</td><td>连接数据库的用户名</td><td>public void com.alibaba.druid.pool.DruidAbstractDataSource.setUsername(java.lang.String)</td></tr><tr><td>validationQuery</td><td>null</td><td>用来检测连接是否有效的sql，要求是一个查询语句，常用select &#39;x&#39;。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会起作用。</td><td>public void com.alibaba.druid.pool.DruidAbstractDataSource.setValidationQuery(java.lang.String)</td></tr><tr><td>validationQueryTimeout</td><td>-1</td><td>单位：秒，检测连接是否有效的超时时间，大于0才生效。底层调用jdbc Statement对象的void setQueryTimeout(int seconds)方法</td><td>public void com.alibaba.druid.pool.DruidAbstractDataSource.setValidationQueryTimeout(int)</td></tr></tbody></table>',4)]))}const c=d(r,[["render",o],["__file","29-Druid.html.vue"]]),s=JSON.parse('{"path":"/docs/java/29-Druid.html","title":"Druid 连接池","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"配置项说明","slug":"配置项说明-1","link":"#配置项说明-1","children":[]}],"git":{"updatedTime":1746692581000,"contributors":[{"name":"wangxiaoquan","email":"wxq","commits":3}]},"filePathRelative":"docs/java/29-Druid.md"}');export{c as comp,s as data};
