import{_ as o,c as l,a as s,b as e,w as t,d as c,r as i,o as u,e as p}from"./app-CKtXyHQO.js";const r={},k={class:"table-of-contents"};function d(m,n){const a=i("router-link");return u(),l("div",null,[n[2]||(n[2]=s("h1",{id:"beanpostprocessor",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#beanpostprocessor"},[s("span",null,"BeanPostProcessor")])],-1)),n[3]||(n[3]=s("p",null,[s("strong",null,"目录")],-1)),s("nav",k,[s("ul",null,[s("li",null,[e(a,{to:"#源码说明"},{default:t(()=>n[0]||(n[0]=[p("源码说明")])),_:1})]),s("li",null,[e(a,{to:"#拦截自定义注解"},{default:t(()=>n[1]||(n[1]=[p("拦截自定义注解")])),_:1})])])]),n[4]||(n[4]=c(`<h2 id="源码说明" tabindex="-1"><a class="header-anchor" href="#源码说明"><span>源码说明</span></a></h2><blockquote><p>Factory hook that allows for custom modification of new bean instances — for example, checking for marker interfaces or wrapping beans with proxies. Typically, post-processors that populate beans via marker interfaces or the like will implement postProcessBeforeInitialization, while post-processors that wrap beans with proxies will normally implement postProcessAfterInitialization.</p></blockquote><p>源码大致意思是，<code>BeanPostProcessor</code> 是一个bean后置处理器，它允许对新的Bean实例进行自定义修改。例如，检查标记接口或使用代理包装Bean。通常通过标记接口等填充Bean的后处理器将实现<code>postProcessBeforeInitialization</code> ，而使用代理包装Bean的后处理器通常会实现<code>postProcessAfterInitialization</code>。</p><h2 id="拦截自定义注解" tabindex="-1"><a class="header-anchor" href="#拦截自定义注解"><span>拦截自定义注解</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Component</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestBeanPostProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">BeanPostProcessor</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">TestAnnonation</span><span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">BeanPostProcessor</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> beanClazz <span class="token operator">=</span> bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">TestAnnonation</span> ta <span class="token operator">=</span> beanClazz<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">TestAnnonation</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span>ta <span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;this is ta annonation&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">BeanPostProcessor</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5))])}const b=o(r,[["render",d],["__file","20-BeanPostProcessor.html.vue"]]),f=JSON.parse('{"path":"/docs/java/20-BeanPostProcessor.html","title":"BeanPostProcessor","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"源码说明","slug":"源码说明","link":"#源码说明","children":[]},{"level":2,"title":"拦截自定义注解","slug":"拦截自定义注解","link":"#拦截自定义注解","children":[]}],"git":{"updatedTime":1734338014000,"contributors":[{"name":"wangxiaoquan","email":"wxq","commits":1}]},"filePathRelative":"docs/java/20-BeanPostProcessor.md"}');export{b as comp,f as data};
