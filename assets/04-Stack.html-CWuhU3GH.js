import{_ as p,c as i,a as n,b as e,w as l,d as o,r as c,o as r,e as t}from"./app-CKtXyHQO.js";const d={},u={class:"table-of-contents"};function k(m,s){const a=c("router-link");return r(),i("div",null,[s[8]||(s[8]=n("h1",{id:"stack",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#stack"},[n("span",null,"Stack")])],-1)),s[9]||(s[9]=n("p",null,[n("strong",null,"目录")],-1)),n("nav",u,[n("ul",null,[n("li",null,[e(a,{to:"#概述"},{default:l(()=>s[0]||(s[0]=[t("概述")])),_:1})]),n("li",null,[e(a,{to:"#docker-stack-和-docker-compose-区别"},{default:l(()=>s[1]||(s[1]=[t("Docker Stack 和 Docker Compose 区别")])),_:1})]),n("li",null,[e(a,{to:"#compose-yml-deploy-配置说明"},{default:l(()=>s[2]||(s[2]=[t("compose.yml deploy 配置说明")])),_:1})]),n("li",null,[e(a,{to:"#compose-yml-文件示例"},{default:l(()=>s[3]||(s[3]=[t("compose.yml 文件示例")])),_:1})]),n("li",null,[e(a,{to:"#stack-常用命令"},{default:l(()=>s[4]||(s[4]=[t("stack 常用命令")])),_:1}),n("ul",null,[n("li",null,[e(a,{to:"#部署"},{default:l(()=>s[5]||(s[5]=[t("部署")])),_:1})]),n("li",null,[e(a,{to:"#查看"},{default:l(()=>s[6]||(s[6]=[t("查看")])),_:1})]),n("li",null,[e(a,{to:"#删除"},{default:l(()=>s[7]||(s[7]=[t("删除")])),_:1})])])])])]),s[10]||(s[10]=o(`<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><ul><li><p>应用定义：Docker Stack 是用于定义、部署和管理应用程序的工具。它使用 YAML 文件（通常命名为 docker-compose.yml）来描述应用程序的服务、网络和卷等配置。</p></li><li><p>Swarm 集群部署：Docker Stack 是基于 Docker Swarm 构建的，用户可以使用 Docker Stack 将定义好的应用程序部署到 Swarm 集群中。</p></li><li><p>服务定义：与 Docker Compose 相似，Docker Stack 允许用户使用 YAML 文件定义多个服务，并指定它们之间的依赖关系、网络连接等。</p></li><li><p>自动伸缩：通过 Docker Stack，用户可以轻松地扩展应用程序的规模，根据需要增加或减少服务的副本数量。</p></li><li><p>更新管理：Docker Stack 提供了方便的更新管理功能，用户可以定义更新策略，实现无缝地更新应用程序版本。</p></li></ul><h2 id="docker-stack-和-docker-compose-区别" tabindex="-1"><a class="header-anchor" href="#docker-stack-和-docker-compose-区别"><span>Docker Stack 和 Docker Compose 区别</span></a></h2><p>Docker stack会忽略了“构建”指令，无法使用stack命令构建新镜像，它是需要镜像是预先已经构建好的。 所以docker-compose更适合于开发场景； Docker Compose是一个Python项目，在内部，它使用Docker API规范来操作容器。所以需要安装Docker -compose，以便与Docker一起在您的计算机上使用；Docker Stack功能包含在Docker引擎中。你不需要安装额外的包来使用它，docker stacks 只是swarm mode的一部分。 Docker stack不支持基于第2版写的docker-compose.yml ，也就是version版本至少为3。然而Docker Compose对版本为2和3的 文件仍然可以处理； docker stack把docker compose的所有工作都做完了，因此docker stack将占主导地位。同时，对于大多数用户来说，切换到使用 单机模式（Docker Compose）是一台主机上运行多个容器，每个容器单独提供服务；集群模式（swarm + stack）是多台机器组成一个集群，多个容器一起提供同一个服务；</p><h2 id="compose-yml-deploy-配置说明" tabindex="-1"><a class="header-anchor" href="#compose-yml-deploy-配置说明"><span>compose.yml deploy 配置说明</span></a></h2><p>docker-compose.yaml文件中deploy参数下的各种配置主要对应了swarm中的运维需求。</p><p>docker stack deploy不支持的参数：</p><p>（这些参数，就算yaml中包含，在stack的时候也会被忽略，当然也可以为了docker-compose up留着这些配置）</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line">build</span>
<span class="line">cgroup_parent</span>
<span class="line">container_name</span>
<span class="line">devices</span>
<span class="line">tmpfs</span>
<span class="line">external_links</span>
<span class="line">links</span>
<span class="line">network_mode</span>
<span class="line">restart</span>
<span class="line">security_opt</span>
<span class="line">userns_mode</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>deploy：指定与服务的部署和运行有关的配置。注：只在 swarm 模式和 stack 部署下才会有用。且仅支持 V3.4 及更高版本。</p><p>可以选参数：</p><ul><li><p>endpoint_mode：访问集群服务的方式。3.2版本开始引入的配置。用于指定服务发现，以方便外部的客户端连接到swarm</p><ul><li><p>vip：默认的方案。即通过 Docker 集群服务一个对外的虚拟 ip对外暴露服务，所有的请求都会通过这个虚拟 ip 到达集群服务内部的机器，客户端无法察觉有多少个节点提供服务，也不知道实际提供服务的IP和端口。</p></li><li><p>dnsrr：DNS的轮询调度。所有的请求会自动轮询获取到集群 ip 列表中的一个 ip 地址。客户端访问的时候，Docker集群会通过DNS列表返回对应的服务一系列IP地址，客户连接其中的一个。这种方式通常用于使用自己的负载均衡器，或者window和linux的混合应用。</p></li></ul></li><li><p>labels：在服务上设置标签，并非附加在service中的容器上。如果在容器上设置标签，则在deploy之外定义labels。可以用容器上的 labels（跟 deploy 同级的配置） 覆盖 deploy 下的 labels。</p></li><li><p>mode：用于指定是以副本模式（默认）启动还是全局模式</p><ul><li><p>replicated：副本模式，复制指定服务到集群的机器上。默认。</p></li><li><p>global：全局模式，服务将部署至集群的每个节点。类似于k8s中的DaemonSet，会在每个节点上启动且只启动一个服务。</p></li></ul></li><li><p>replicas：用于指定副本数，只有mode为副本模式的时候生效。</p></li><li><p>placement：主要用于指定约束和偏好。这个参数在运维的时候尤为关键</p><ul><li>constraints(约束)：表示服务可以部署在符合约束条件的节点上，包含了：</li></ul></li></ul><table><thead><tr><th>node attribute</th><th>matches</th><th>example</th></tr></thead><tbody><tr><td>node.id</td><td>节点id</td><td>node.id == 2ivku8v2gvtg4</td></tr><tr><td>node.hostname</td><td>节点主机名</td><td>node.hostname != node-2</td></tr><tr><td>node.role</td><td>节点角色</td><td>(manager/worker)</td></tr><tr><td>node.platform.os</td><td>节点操作系统</td><td>node.platform.os== windows</td></tr><tr><td>node.platform.arch</td><td>节点架构</td><td>node.platform.arch== x86_64</td></tr><tr><td>node.labels</td><td>用户定义的labels</td><td>node.labels.security == high</td></tr><tr><td>engine.labels</td><td>Docker 引擎的 labels</td><td>engine.labels.operatingsystem == ubuntu-14.04</td></tr></tbody></table><ul><li><p>preferences(偏好)：表示服务可以均匀分布在指定的标签下。</p></li><li><p>preferences 只有一个参数，就是spread，其参数值为节点的属性，即约束表中的内容</p><p>例如：node.labels.zone这个标签在集群中有三个值，分别为west、east、north，那么服务中的副本将会等分为三份，分布到带有三个标签的节点上。</p><ul><li>max_replicas_per_node：3.8版本中开始引入的配置。控制每个节点上最多的副本数。 注意：当 最大副本数*集群中可部署服务的节点数&lt;副本数，会报错</li></ul></li><li><p>resources：用于限制服务的资源，这个参数在运维的时候尤为关键。</p></li></ul><p>示例：配置 redis 集群运行需要的 cpu 的百分比 和 内存的占用。避免占用资源过高出现异常。</p><ul><li><p>limit：用于限制最大的资源使用数量</p><ul><li><p>cpus：cpu占比，值的格式为百分比的小数格式</p></li><li><p>memory：内存的大小。示例：512M</p></li></ul></li><li><p>reservation：为最低的资源占用量。</p><ul><li><p>cpus</p></li><li><p>memory</p></li></ul></li><li><p>restart_policy：容器的重启策略</p><ul><li><p>condition：重启的条件。可选 none，on-failure 或者 any。默认值：any</p></li><li><p>delay：尝试重启的时间间隔（默认值：5s）。</p></li><li><p>max_attempts：最大尝试重启容器的次数，超出次数，则不再尝试（默认值：一直重试）.</p></li><li><p>window：判断重启是否成功之前的等待时间（一个总的时间，如果超过这个时间还没有成功，则不再重启）。</p></li></ul></li><li><p>rollback_config：更新失败时的回滚服务的策略。3.7版本加入。和升级策略相关参数基本一致。</p></li><li><p>update_config：配置应如何更新服务，对于配置滚动更新很有用。</p><ul><li><p>parallelism：同时升级[回滚]的容器数</p></li><li><p>delay：升级[回滚]一组容器的时间间隔</p></li><li><p>failure_action：若更新[回滚]失败之后的策略：continue、 pause、rollback(仅在update_config中有) 。默认 pause</p></li><li><p>monitor：容器升级[回滚]之后，检测失败的时间检测 (支持的单位：ns|us|ms|s|m|h)。默认为 5s</p></li><li><p>max_failure_ratio：最大失败率</p></li><li><p>order：升级[回滚]期间的操作顺序。可选：stop-first（串行回滚，先停止旧的）、start-first（并行回滚，先启动新的）。默认 stop-first 。注意：只支持v3.4及更高版本</p></li></ul></li></ul><h2 id="compose-yml-文件示例" tabindex="-1"><a class="header-anchor" href="#compose-yml-文件示例"><span>compose.yml 文件示例</span></a></h2><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&quot;3&quot;</span>        <span class="token comment"># 版本号，deploy功能是3版本及以上才有的</span></span>
<span class="line"><span class="token key atrule">services</span><span class="token punctuation">:</span> <span class="token comment"># 服务，每个服务对应配置相同的一个或者多个docker容器</span></span>
<span class="line">  <span class="token key atrule">redis</span><span class="token punctuation">:</span> <span class="token comment"># 服务名，自取</span></span>
<span class="line">    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis<span class="token punctuation">:</span>alpine        <span class="token comment"># 创建该服务所基于的镜像。使用stack部署，只能基于镜像</span></span>
<span class="line">    <span class="token key atrule">ports</span><span class="token punctuation">:</span> <span class="token comment"># 容器内外的端口映射情况</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token string">&quot;1883:1883&quot;</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token string">&quot;9001:9001&quot;</span></span>
<span class="line">    <span class="token key atrule">networks</span><span class="token punctuation">:</span> <span class="token comment"># 替代了命令行模式的--link选项</span></span>
<span class="line">      <span class="token punctuation">-</span> fiware</span>
<span class="line">    <span class="token key atrule">volumes</span><span class="token punctuation">:</span> <span class="token comment"># 容器内外数据传输的对应地址</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token string">&quot;/srv/mqtt/config:/mqtt/config:ro&quot;</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token string">&quot;/srv/mqtt/log:/mqtt/log&quot;</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token string">&quot;/srv/mqtt/data/:/mqtt/data/&quot;</span></span>
<span class="line">    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>dbhost stack_mongo <span class="token comment"># 命令行模式中跟在最后的参数，此条没有固定的格式，建议参照所部署的docker镜像的说明文档来确定是否需要该项、需要写什么</span></span>
<span class="line">    <span class="token key atrule">deploy</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">mode</span><span class="token punctuation">:</span> replicated</span>
<span class="line">      <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">6</span>            <span class="token comment"># replicas模式， 副本数目为1</span></span>
<span class="line">      <span class="token key atrule">endpoint_mode</span><span class="token punctuation">:</span> vip</span>
<span class="line">      <span class="token key atrule">labels</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">&quot;This redis service label&quot;</span></span>
<span class="line">      <span class="token key atrule">resources</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token key atrule">limits</span><span class="token punctuation">:</span></span>
<span class="line">          <span class="token key atrule">cpus</span><span class="token punctuation">:</span> <span class="token string">&#39;0.50&#39;</span></span>
<span class="line">          <span class="token key atrule">memory</span><span class="token punctuation">:</span> 50M</span>
<span class="line">        <span class="token key atrule">reservations</span><span class="token punctuation">:</span></span>
<span class="line">          <span class="token key atrule">cpus</span><span class="token punctuation">:</span> <span class="token string">&#39;0.25&#39;</span></span>
<span class="line">          <span class="token key atrule">memory</span><span class="token punctuation">:</span> 20M</span>
<span class="line">      <span class="token key atrule">restart_policy</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token key atrule">condition</span><span class="token punctuation">:</span> on<span class="token punctuation">-</span>failure</span>
<span class="line">        <span class="token key atrule">delay</span><span class="token punctuation">:</span> 5s</span>
<span class="line">        <span class="token key atrule">max_attempts</span><span class="token punctuation">:</span> <span class="token number">3</span></span>
<span class="line">        <span class="token key atrule">window</span><span class="token punctuation">:</span> 120s</span>
<span class="line">      <span class="token key atrule">placement</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token key atrule">constraints</span><span class="token punctuation">:</span></span>
<span class="line">          <span class="token punctuation">-</span> <span class="token string">&quot;node.role==worker&quot;</span>        <span class="token comment"># 部署位置，只在工作节点部署</span></span>
<span class="line">          <span class="token punctuation">-</span> <span class="token string">&quot;engine.labels.operatingsystem==ubuntu 18.04&quot;</span></span>
<span class="line">        <span class="token key atrule">preferences</span><span class="token punctuation">:</span></span>
<span class="line">          <span class="token punctuation">-</span> <span class="token key atrule">spread</span><span class="token punctuation">:</span> node.labels.zone</span>
<span class="line">      <span class="token key atrule">update_config</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token key atrule">parallelism</span><span class="token punctuation">:</span> <span class="token number">2</span></span>
<span class="line">        <span class="token key atrule">delay</span><span class="token punctuation">:</span> 10s</span>
<span class="line">        <span class="token key atrule">order</span><span class="token punctuation">:</span> stop<span class="token punctuation">-</span>first</span>
<span class="line"></span>
<span class="line"><span class="token key atrule">networks</span><span class="token punctuation">:</span> <span class="token comment"># 定义部署该项目所需要的网络</span></span>
<span class="line">  <span class="token key atrule">fiware</span><span class="token punctuation">:</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="stack-常用命令" tabindex="-1"><a class="header-anchor" href="#stack-常用命令"><span>stack 常用命令</span></a></h2><h3 id="部署" tabindex="-1"><a class="header-anchor" href="#部署"><span>部署</span></a></h3><p>部署一个新的stack(堆栈)或更新现有的stack。别名：deploy, up</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> stack deploy <span class="token punctuation">[</span>options<span class="token punctuation">]</span> 自定义STACK名称</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>options:</p><ul><li><code>-c, --compose-file strings</code>，Compose文件的路径，或从标准输入中读取的“-”</li><li><code>--orchestrator string</code>，指定编排模式 (swarm|kubernetes|all)</li><li><code>--prune</code>，表示削减不再引用的服务。可以把一些down掉的service进行自动清理。</li><li><code>resolve-image string</code>，请求仓库来重新解析镜像的摘要和支持的平台。(&quot;always&quot;|&quot;changed&quot;|&quot;never&quot;) (默认 &quot;always&quot;)</li><li><code>--with-registry-auth</code>，发送仓库的授权详情到Swarm代理</li><li><code>--orchestrator</code>，使用的容器编排服务</li></ul><h4 id="通过-compose-yml-文件指令部署" tabindex="-1"><a class="header-anchor" href="#通过-compose-yml-文件指令部署"><span>通过 compose.yml 文件指令部署</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> stack deploy <span class="token parameter variable">-c</span> 文件名.yml 自定义STACK名称</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="查看" tabindex="-1"><a class="header-anchor" href="#查看"><span>查看</span></a></h3><h4 id="查看-stack-信息" tabindex="-1"><a class="header-anchor" href="#查看-stack-信息"><span>查看 stack 信息</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> stack <span class="token function">ls</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="查看-stack-中的任务" tabindex="-1"><a class="header-anchor" href="#查看-stack-中的任务"><span>查看 stack 中的任务</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> stack <span class="token function">ps</span> STACK</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="查看-stack-中的服务" tabindex="-1"><a class="header-anchor" href="#查看-stack-中的服务"><span>查看 stack 中的服务</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> stack services STACK</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="删除" tabindex="-1"><a class="header-anchor" href="#删除"><span>删除</span></a></h3><p>删除一个或多个堆栈。别名：rm, remove, down</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> stack <span class="token function">rm</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span> STACK <span class="token punctuation">[</span>STACK<span class="token punctuation">..</span>.<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>options:</p><ul><li><code>--orchestrator string</code>，指定适配器 (swarm|kubernetes|all)</li></ul>`,38))])}const b=p(d,[["render",k],["__file","04-Stack.html.vue"]]),h=JSON.parse('{"path":"/docs/docker/04-Stack.html","title":"Stack","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"Docker Stack 和 Docker Compose 区别","slug":"docker-stack-和-docker-compose-区别","link":"#docker-stack-和-docker-compose-区别","children":[]},{"level":2,"title":"compose.yml deploy 配置说明","slug":"compose-yml-deploy-配置说明","link":"#compose-yml-deploy-配置说明","children":[]},{"level":2,"title":"compose.yml 文件示例","slug":"compose-yml-文件示例","link":"#compose-yml-文件示例","children":[]},{"level":2,"title":"stack 常用命令","slug":"stack-常用命令","link":"#stack-常用命令","children":[{"level":3,"title":"部署","slug":"部署","link":"#部署","children":[]},{"level":3,"title":"查看","slug":"查看","link":"#查看","children":[]},{"level":3,"title":"删除","slug":"删除","link":"#删除","children":[]}]}],"git":{"updatedTime":1734338014000,"contributors":[{"name":"wangxiaoquan","email":"wxq","commits":1}]},"filePathRelative":"docs/docker/04-Stack.md"}');export{b as comp,h as data};
