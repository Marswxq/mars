import{_ as t,c as d,a as n,b as e,w as i,d as r,r as c,o as p,e as l}from"./app-CKtXyHQO.js";const o={},u={class:"table-of-contents"};function m(h,s){const a=c("router-link");return p(),d("div",null,[s[42]||(s[42]=n("h1",{id:"git-使用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#git-使用"},[n("span",null,"Git 使用")])],-1)),s[43]||(s[43]=n("p",null,[n("strong",null,"目录")],-1)),n("nav",u,[n("ul",null,[n("li",null,[e(a,{to:"#基本命令"},{default:i(()=>s[0]||(s[0]=[l("基本命令")])),_:1}),n("ul",null,[n("li",null,[e(a,{to:"#初始化"},{default:i(()=>s[1]||(s[1]=[l("初始化")])),_:1})]),n("li",null,[e(a,{to:"#添加文件"},{default:i(()=>s[2]||(s[2]=[l("添加文件")])),_:1})]),n("li",null,[e(a,{to:"#添加标签"},{default:i(()=>s[3]||(s[3]=[l("添加标签")])),_:1})]),n("li",null,[e(a,{to:"#推送标签"},{default:i(()=>s[4]||(s[4]=[l("推送标签")])),_:1})]),n("li",null,[e(a,{to:"#删除本地标签"},{default:i(()=>s[5]||(s[5]=[l("删除本地标签")])),_:1})]),n("li",null,[e(a,{to:"#删除远端标签"},{default:i(()=>s[6]||(s[6]=[l("删除远端标签")])),_:1})]),n("li",null,[e(a,{to:"#删除文件"},{default:i(()=>s[7]||(s[7]=[l("删除文件")])),_:1})]),n("li",null,[e(a,{to:"#提交"},{default:i(()=>s[8]||(s[8]=[l("提交")])),_:1})]),n("li",null,[e(a,{to:"#查看git库的状态"},{default:i(()=>s[9]||(s[9]=[l("查看git库的状态")])),_:1})]),n("li",null,[e(a,{to:"#比较"},{default:i(()=>s[10]||(s[10]=[l("比较")])),_:1})]),n("li",null,[e(a,{to:"#查看日志"},{default:i(()=>s[11]||(s[11]=[l("查看日志")])),_:1})]),n("li",null,[e(a,{to:"#版本回退"},{default:i(()=>s[12]||(s[12]=[l("版本回退")])),_:1})]),n("li",null,[e(a,{to:"#查看命令历史"},{default:i(()=>s[13]||(s[13]=[l("查看命令历史")])),_:1})])])]),n("li",null,[e(a,{to:"#分支管理"},{default:i(()=>s[14]||(s[14]=[l("分支管理")])),_:1}),n("ul",null,[n("li",null,[e(a,{to:"#查看分支"},{default:i(()=>s[15]||(s[15]=[l("查看分支")])),_:1})]),n("li",null,[e(a,{to:"#创建分支"},{default:i(()=>s[16]||(s[16]=[l("创建分支")])),_:1})]),n("li",null,[e(a,{to:"#切换分支"},{default:i(()=>s[17]||(s[17]=[l("切换分支")])),_:1})]),n("li",null,[e(a,{to:"#创建分支并切换到创建的分支"},{default:i(()=>s[18]||(s[18]=[l("创建分支并切换到创建的分支")])),_:1})]),n("li",null,[e(a,{to:"#合并某分支的内容到当前分支"},{default:i(()=>s[19]||(s[19]=[l("合并某分支的内容到当前分支")])),_:1})]),n("li",null,[e(a,{to:"#删除分支"},{default:i(()=>s[20]||(s[20]=[l("删除分支")])),_:1})]),n("li",null,[e(a,{to:"#查看分支合并图"},{default:i(()=>s[21]||(s[21]=[l("查看分支合并图")])),_:1})])])]),n("li",null,[e(a,{to:"#git远端库相关"},{default:i(()=>s[22]||(s[22]=[l("git远端库相关")])),_:1}),n("ul",null,[n("li",null,[e(a,{to:"#添加远端仓库"},{default:i(()=>s[23]||(s[23]=[l("添加远端仓库")])),_:1})]),n("li",null,[e(a,{to:"#移除远端仓库"},{default:i(()=>s[24]||(s[24]=[l("移除远端仓库")])),_:1})]),n("li",null,[e(a,{to:"#将本地仓库内容推送到远端仓库"},{default:i(()=>s[25]||(s[25]=[l("将本地仓库内容推送到远端仓库")])),_:1})]),n("li",null,[e(a,{to:"#从远端库更新内容到本地"},{default:i(()=>s[26]||(s[26]=[l("从远端库更新内容到本地")])),_:1})]),n("li",null,[e(a,{to:"#从远程仓库抓取数据"},{default:i(()=>s[27]||(s[27]=[l("从远程仓库抓取数据")])),_:1})]),n("li",null,[e(a,{to:"#别名"},{default:i(()=>s[28]||(s[28]=[l("别名")])),_:1})])])]),n("li",null,[e(a,{to:"#_1-没有参数的情况"},{default:i(()=>s[29]||(s[29]=[l("1. 没有参数的情况")])),_:1})]),n("li",null,[e(a,{to:"#_2-一个参数的情况"},{default:i(()=>s[30]||(s[30]=[l("2. 一个参数的情况")])),_:1})]),n("li",null,[e(a,{to:"#_3-两个参数的情况"},{default:i(()=>s[31]||(s[31]=[l("3. 两个参数的情况")])),_:1})]),n("li",null,[e(a,{to:"#切换分支时报错-error-cannot-stat-file-permission-denied"},{default:i(()=>s[32]||(s[32]=[l("切换分支时报错： error: cannot stat ‘file’: Permission denied")])),_:1})]),n("li",null,[e(a,{to:"#解决冲突"},{default:i(()=>s[33]||(s[33]=[l("解决冲突")])),_:1})]),n("li",null,[e(a,{to:"#git-撤销已经push的记录"},{default:i(()=>s[34]||(s[34]=[l("git 撤销已经push的记录")])),_:1})]),n("li",null,[e(a,{to:"#gitignore文件并不生效"},{default:i(()=>s[35]||(s[35]=[l(".gitignore文件并不生效")])),_:1})]),n("li",null,[e(a,{to:"#git撤销commit"},{default:i(()=>s[36]||(s[36]=[l("git撤销commit")])),_:1})]),n("li",null,[e(a,{to:"#commit注释修改"},{default:i(()=>s[37]||(s[37]=[l("commit注释修改")])),_:1})]),n("li",null,[e(a,{to:"#git-ssl-certificate-problem-unable-to-get-local-issuer-certificate"},{default:i(()=>s[38]||(s[38]=[l("git SSL certificate problem: unable to get local issuer certificate")])),_:1})]),n("li",null,[e(a,{to:"#tls-certificate-verification-has-been-disabled"},{default:i(()=>s[39]||(s[39]=[l("TLS certificate verification has been disabled!")])),_:1})]),n("li",null,[e(a,{to:"#git-add回退"},{default:i(()=>s[40]||(s[40]=[l("git add回退")])),_:1})]),n("li",null,[e(a,{to:"#remote-the-project-you-were-looking-for-could-not-be-found"},{default:i(()=>s[41]||(s[41]=[l("remote: The project you were looking for could not be found")])),_:1})])])]),s[44]||(s[44]=r(`<h2 id="基本命令" tabindex="-1"><a class="header-anchor" href="#基本命令"><span>基本命令</span></a></h2><h3 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化"><span>初始化</span></a></h3><p>创建一个git仓库，创建之后就会在当前目录生成一个.git的文件</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> init</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="添加文件" tabindex="-1"><a class="header-anchor" href="#添加文件"><span>添加文件</span></a></h3><p>把文件添加到缓冲区</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> <span class="token function">add</span> filename</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>添加所有文件到缓冲区（从目前掌握的水平看，和后面加“.”的区别在于，加all可以添加被手动删除的文件，而加“.”不行）</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span></span>
<span class="line"><span class="token function">git</span> <span class="token function">add</span> <span class="token parameter variable">--all</span> 或 <span class="token function">git</span> <span class="token function">add</span> <span class="token parameter variable">-A</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="添加标签" tabindex="-1"><a class="header-anchor" href="#添加标签"><span>添加标签</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> tag <span class="token parameter variable">-a</span> <span class="token string">&quot;标签名&quot;</span> <span class="token parameter variable">-m</span> <span class="token string">&quot;标签注释&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="推送标签" tabindex="-1"><a class="header-anchor" href="#推送标签"><span>推送标签</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> push origin <span class="token string">&quot;标签名&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="删除本地标签" tabindex="-1"><a class="header-anchor" href="#删除本地标签"><span>删除本地标签</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> tag <span class="token parameter variable">-d</span> 标签名</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="删除远端标签" tabindex="-1"><a class="header-anchor" href="#删除远端标签"><span>删除远端标签</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> push origin :refs/tags/标签名</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="删除文件" tabindex="-1"><a class="header-anchor" href="#删除文件"><span>删除文件</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> <span class="token function">rm</span> filename</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="提交" tabindex="-1"><a class="header-anchor" href="#提交"><span>提交</span></a></h3><p>提交缓冲区的所有修改到仓库(注意：如果修改了文件但是没有add到缓冲区，也是不会被提交的)</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;提交的说明&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>commit可以一次提交缓冲区的所有文件</p><h3 id="查看git库的状态" tabindex="-1"><a class="header-anchor" href="#查看git库的状态"><span>查看git库的状态</span></a></h3><p>未提交的文件，分为两种，add过已经在缓冲区的，未add过的(git bash中绿色内容)</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> status</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="比较" tabindex="-1"><a class="header-anchor" href="#比较"><span>比较</span></a></h3><p>如果文件修改了，还没有提交，就可以比较文件修改前后的差异</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> <span class="token function">diff</span> filename</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>查看暂存区文件和上次提交的快照之间的差异</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> <span class="token function">diff</span> <span class="token parameter variable">--cached</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>显示出branch1和branch2中差异的部分</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> <span class="token function">diff</span> branch1 branch2 <span class="token parameter variable">--stat</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>显示指定文件的详细差异</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> <span class="token function">diff</span> branch1 branch2 具体文件路径</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>显示出所有有差异的文件的详细差异</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> <span class="token function">diff</span> branch1 branch2</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="查看日志" tabindex="-1"><a class="header-anchor" href="#查看日志"><span>查看日志</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> log</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>查看branch1分支有，而branch2中没有的log</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> log branch1 ^branch2</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>查看branch2中比branch1中多提交了哪些内容, 注意，列出来的是两个点后边（此处即dev）多提交的内容。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> log branch1<span class="token punctuation">..</span>branch2</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>不知道谁提交的多谁提交的少，单纯想知道有什么不一样</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> log branch1<span class="token punctuation">..</span>.branch2</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在上述情况下，在显示出每个提交是在哪个分支上，注意 commit 后面的箭头，根据我们在 –left-right branch1…branch2 的顺序，左箭头 &lt; 表示是 branch1 的，右箭头 &gt; 表示是branch2的。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> log -lefg-right branch1<span class="token punctuation">..</span>.branch2</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="版本回退" tabindex="-1"><a class="header-anchor" href="#版本回退"><span>版本回退</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> reset</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>第一种用法：回退到上一个版本（HEAD代表当前版本，有一个^代表上一个版本，以此类推）</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> reset <span class="token parameter variable">--hard</span> HEAD^</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>第二种用法：回退到指定版本(其中d7b5是想回退的指定版本号的前几位)</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> reset <span class="token parameter variable">--hard</span> d7b5</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>第三种用法：回退到当前最高版本</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> reset <span class="token parameter variable">--hard</span> HEAD</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="查看命令历史" tabindex="-1"><a class="header-anchor" href="#查看命令历史"><span>查看命令历史</span></a></h3><p>查看仓库的操作历史</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> reflog</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="分支管理" tabindex="-1"><a class="header-anchor" href="#分支管理"><span>分支管理</span></a></h2><h3 id="查看分支" tabindex="-1"><a class="header-anchor" href="#查看分支"><span>查看分支</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> branch</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>查看本地所有分支</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> branch <span class="token parameter variable">-a</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>查看远端详情</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> remote show origin</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>分支跟踪信息</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> branch <span class="token parameter variable">-vv</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="创建分支" tabindex="-1"><a class="header-anchor" href="#创建分支"><span>创建分支</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> branch 分支名</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="切换分支" tabindex="-1"><a class="header-anchor" href="#切换分支"><span>切换分支</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> checkout 分支名</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>快速切换到上一个分支</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> checkout @<span class="token punctuation">{</span>-1<span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>快速切换到上一个分支简化写法</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> checkout -</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="创建分支并切换到创建的分支" tabindex="-1"><a class="header-anchor" href="#创建分支并切换到创建的分支"><span>创建分支并切换到创建的分支</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> 分支名</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="合并某分支的内容到当前分支" tabindex="-1"><a class="header-anchor" href="#合并某分支的内容到当前分支"><span>合并某分支的内容到当前分支</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> merge 分支名</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>合并时难免有冲突 #调用图形化工具解决冲突</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> mergetool</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="删除分支" tabindex="-1"><a class="header-anchor" href="#删除分支"><span>删除分支</span></a></h3><p>删除前检查merge状态（其与上游分支或者与head）</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> branch <span class="token parameter variable">-d</span> 分支名</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>直接删除</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> branch <span class="token parameter variable">-D</span> 分支名</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="查看分支合并图" tabindex="-1"><a class="header-anchor" href="#查看分支合并图"><span>查看分支合并图</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> log <span class="token parameter variable">--graph</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="git远端库相关" tabindex="-1"><a class="header-anchor" href="#git远端库相关"><span>git远端库相关</span></a></h2><h3 id="添加远端仓库" tabindex="-1"><a class="header-anchor" href="#添加远端仓库"><span>添加远端仓库</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> remote <span class="token function">add</span> origin git://127.0.0.1/abc.git</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="移除远端仓库" tabindex="-1"><a class="header-anchor" href="#移除远端仓库"><span>移除远端仓库</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> remote remove origin移除远端仓库</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="将本地仓库内容推送到远端仓库" tabindex="-1"><a class="header-anchor" href="#将本地仓库内容推送到远端仓库"><span>将本地仓库内容推送到远端仓库</span></a></h3><p>-u 表示第一次推送master分支的所有内容，后面再推送就不需要-u了,跟commit的区别在于一个是提交到本地仓库，一个是提交到远程仓库</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> push <span class="token parameter variable">-u</span> origin master</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="从远端库更新内容到本地" tabindex="-1"><a class="header-anchor" href="#从远端库更新内容到本地"><span>从远端库更新内容到本地</span></a></h3><p>取回远程仓库的变化，并与本地分支合并</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> pull <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> <span class="token punctuation">[</span>branch<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>git pull 命令用来更新代码，该命令相当于git fetch 和 git merge 的组合。</p><h3 id="从远程仓库抓取数据" tabindex="-1"><a class="header-anchor" href="#从远程仓库抓取数据"><span>从远程仓库抓取数据</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> fetch <span class="token punctuation">[</span>remote-name<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>fetch 命令只是将远端的数据拉到本地仓库，并不自动合并到当前工作分支</p><h3 id="别名" tabindex="-1"><a class="header-anchor" href="#别名"><span>别名</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">git</span> config alias.st  <span class="token string">&quot;status&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>.后面的字符，代表将来要简写的命令。双引号内的字符，代表着原来命令</p><h1 id="检查配置信息" tabindex="-1"><a class="header-anchor" href="#检查配置信息"><span>检查配置信息</span></a></h1><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">git</span> config <span class="token parameter variable">--list</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>可以通过输入 <code>git config</code>： 来检查 Git 的某一项配置</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">git</span> config user.name</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>用vim编辑配置</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">git</span> config –e</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h1 id="克隆现有的仓库" tabindex="-1"><a class="header-anchor" href="#克隆现有的仓库"><span>克隆现有的仓库</span></a></h1><p>克隆仓库的命令是 <code>git clone</code> 。 比如，要克隆 Git 的链接库 <code>libgit2</code>，可以用下面的命令：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">git</span> clone https://github.com/libgit2/libgit2</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这会在当前目录下创建一个名为 “libgit2” 的目录，并在这个目录下初始化一个 <code>.git</code> 文件夹， 从远程仓库拉取下所有数据放入 <code>.git</code> 文件夹，然后从中读取最新版本的文件的拷贝。 如果你进入到这个新建的 <code>libgit2</code> 文件夹，你会发现所有的项目文件已经在里面了，准备就绪等待后续的开发和使用。 如果你想在克隆远程仓库的时候，自定义本地仓库的名字，你可以通过额外的参数指定新的目录名：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">git</span> clone https://github.com/libgit2/libgit2 mylibgit</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这会执行与上一条命令相同的操作，但目标目录名变为了 <code>mylibgit</code>。</p><h1 id="检查当前文件状态" tabindex="-1"><a class="header-anchor" href="#检查当前文件状态"><span>检查当前文件状态</span></a></h1><p>可以用 <code>git status</code> 命令查看哪些文件处于什么状态。 如果在克隆仓库后立即使用此命令，会看到类似这样的输出：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">git</span> status</span>
<span class="line">On branch master</span>
<span class="line">Your branch is up-to-date with <span class="token string">&#39;origin/master&#39;</span><span class="token builtin class-name">.</span></span>
<span class="line">nothing to commit, working directory clean</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="跟踪新文件" tabindex="-1"><a class="header-anchor" href="#跟踪新文件"><span>跟踪新文件</span></a></h1><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">git</span> <span class="token function">add</span> README</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>此时再运行 <code>git status</code> 命令，会看到 <code>README</code> 文件已被跟踪，并处于暂存状态：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">git</span> status</span>
<span class="line">On branch master</span>
<span class="line">Your branch is up-to-date with <span class="token string">&#39;origin/master&#39;</span><span class="token builtin class-name">.</span></span>
<span class="line">Changes to be committed:</span>
<span class="line"><span class="token punctuation">(</span>use <span class="token string">&quot;git restore --staged &lt;file&gt;...&quot;</span> to unstage<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    new file:   README</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只要在 <code>Changes to be committed</code> 这行下面的，就说明是已暂存状态。 如果此时提交，那么该文件在你运行 <code>git add</code> 时的版本将被留存在后续的历史记录中。 你可能会想起之前我们使用 <code>git init</code> 后就运行了 <code>git add</code> 命令，开始跟踪当前目录下的文件。 <code>git add</code> 命令使用文件或目录的路径作为参数；如果参数是目录的路径，该命令将递归地跟踪该目录下的所有文件。</p><h1 id="暂存已修改的文件" tabindex="-1"><a class="header-anchor" href="#暂存已修改的文件"><span>暂存已修改的文件</span></a></h1><p>现在我们来修改一个已被跟踪的文件。 如果你修改了一个名为 <code>CONTRIBUTING.md</code> 的已被跟踪的文件，然后运行 <code>git status</code> 命令，会看到下面内容：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">git</span> status</span>
<span class="line">On branch master</span>
<span class="line">Your branch is up-to-date with <span class="token string">&#39;origin/master&#39;</span><span class="token builtin class-name">.</span></span>
<span class="line">Changes to be committed:</span>
<span class="line"><span class="token punctuation">(</span>use <span class="token string">&quot;git reset HEAD &lt;file&gt;...&quot;</span> to unstage<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">new file:   README</span>
<span class="line"></span>
<span class="line">Changes not staged <span class="token keyword">for</span> commit:</span>
<span class="line"><span class="token punctuation">(</span>use <span class="token string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">(</span>use <span class="token string">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes <span class="token keyword">in</span> working directory<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    modified:   CONTRIBUTING.md</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>文件 <code>CONTRIBUTING.md</code> 出现在 <code>Changes not staged for commit</code> 这行下面，说明已跟踪文件的内容发生了变化，但还没有放到暂存区。 要暂存这次更新，需要运行 <code>git add</code> 命令。 这是个多功能命令：可以用它开始跟踪新文件，或者把已跟踪的文件放到暂存区，还能用于合并时把有冲突的文件标记为已解决状态等。 将这个命令理解为“精确地将内容添加到下一次提交中”而不是“将一个文件添加到项目中”要更加合适。 现在让我们运行 <code>git add</code> 将“CONTRIBUTING.md”放到暂存区，然后再看看 <code>git status</code> 的输出：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">git</span> <span class="token function">add</span> CONTRIBUTING.md</span>
<span class="line">$ <span class="token function">git</span> status</span>
<span class="line">On branch master</span>
<span class="line">Your branch is up-to-date with <span class="token string">&#39;origin/master&#39;</span><span class="token builtin class-name">.</span></span>
<span class="line">Changes to be committed:</span>
<span class="line"><span class="token punctuation">(</span>use <span class="token string">&quot;git reset HEAD &lt;file&gt;...&quot;</span> to unstage<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">new file:   README</span>
<span class="line">    modified:   CONTRIBUTING.md</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在两个文件都已暂存，下次提交时就会一并记录到仓库。 假设此时，你想要在 <code>CONTRIBUTING.md</code> 里再加条注释。 重新编辑存盘后，准备好提交。 不过且慢，再运行 <code>git status</code> 看看：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">vim</span> CONTRIBUTING.md</span>
<span class="line">$ <span class="token function">git</span> status</span>
<span class="line">On branch master</span>
<span class="line">Your branch is up-to-date with <span class="token string">&#39;origin/master&#39;</span><span class="token builtin class-name">.</span></span>
<span class="line">Changes to be committed:</span>
<span class="line"><span class="token punctuation">(</span>use <span class="token string">&quot;git reset HEAD &lt;file&gt;...&quot;</span> to unstage<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">new file:   README</span>
<span class="line">modified:   CONTRIBUTING.md</span>
<span class="line"></span>
<span class="line">Changes not staged <span class="token keyword">for</span> commit:</span>
<span class="line"><span class="token punctuation">(</span>use <span class="token string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">(</span>use <span class="token string">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes <span class="token keyword">in</span> working directory<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    modified:   CONTRIBUTING.md</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>怎么回事？ 现在 <code>CONTRIBUTING.md</code> 文件同时出现在暂存区和非暂存区。 这怎么可能呢？ 好吧，实际上 Git 只不过暂存了你运行 <code>git add</code> 命令时的版本。 如果你现在提交，<code>CONTRIBUTING.md</code> 的版本是你最后一次运行 <code>git add</code> 命令时的那个版本，而不是你运行 <code>git commit</code> 时，在工作目录中的当前版本。 所以，运行了 <code>git add</code> 之后又作了修订的文件，需要重新运行 <code>git add</code> 把最新版本重新暂存起来：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">git</span> <span class="token function">add</span> CONTRIBUTING.md</span>
<span class="line">$ <span class="token function">git</span> status</span>
<span class="line">On branch master</span>
<span class="line">Your branch is up-to-date with <span class="token string">&#39;origin/master&#39;</span><span class="token builtin class-name">.</span></span>
<span class="line">Changes to be committed:</span>
<span class="line"><span class="token punctuation">(</span>use <span class="token string">&quot;git reset HEAD &lt;file&gt;...&quot;</span> to unstage<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">new file:   README</span>
<span class="line">    modified:   CONTRIBUTING.md</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="忽略文件" tabindex="-1"><a class="header-anchor" href="#忽略文件"><span>忽略文件</span></a></h1><p><code>.gitignore</code> 文件的例子：</p><div class="language-properties line-numbers-mode" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre><code><span class="line"><span class="token comment"># 忽略所有的 .a 文件</span></span>
<span class="line">*.a</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 但跟踪所有的 lib.a，即便你在前面忽略了 .a 文件</span></span>
<span class="line"><span class="token comment">!lib.a</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 只忽略当前目录下的 TODO 文件，而不忽略 subdir/TODO</span></span>
<span class="line">/TODO</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 忽略任何目录下名为 build 的文件夹</span></span>
<span class="line">build/</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 忽略 doc/notes.txt，但不忽略 doc/server/arch.txt</span></span>
<span class="line">doc/*.txt</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 忽略 doc/ 目录及其所有子目录下的 .pdf 文件</span></span>
<span class="line">doc/**/*.pdf</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="提交更新" tabindex="-1"><a class="header-anchor" href="#提交更新"><span>提交更新</span></a></h1><p>现在的暂存区已经准备就绪，可以提交了。 在此之前，请务必确认还有什么已修改或新建的文件还没有 <code>git add</code> 过， 否则提交的时候不会记录这些尚未暂存的变化。 这些已修改但未暂存的文件只会保留在本地磁盘。 所以，每次准备提交前，先用 <code>git status</code> 看下，你所需要的文件是不是都已暂存起来了， 然后再运行提交命令 <code>git commit</code>：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">git</span> commit</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这样会启动你选择的文本编辑器来输入提交说明。 也可以在 <code>commit</code> 命令后添加 <code>-m</code> 选项，将提交信息与命令放在同一行，如下所示：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;Story 182: Fix benchmarks for speed&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h1 id="跳过使用暂存区域" tabindex="-1"><a class="header-anchor" href="#跳过使用暂存区域"><span>跳过使用暂存区域</span></a></h1><p>尽管使用暂存区域的方式可以精心准备要提交的细节，但有时候这么做略显繁琐。 Git 提供了一个跳过使用暂存区域的方式， 只要在提交的时候，给 <code>git commit</code> 加上 <code>-a</code> 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 <code>git add</code> 步骤：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">git</span> status</span>
<span class="line">On branch master</span>
<span class="line">Your branch is up-to-date with <span class="token string">&#39;origin/master&#39;</span><span class="token builtin class-name">.</span></span>
<span class="line">Changes not staged <span class="token keyword">for</span> commit:</span>
<span class="line">  <span class="token punctuation">(</span>use <span class="token string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">(</span>use <span class="token string">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes <span class="token keyword">in</span> working directory<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    modified:   CONTRIBUTING.md</span>
<span class="line"></span>
<span class="line">no changes added to commit <span class="token punctuation">(</span>use <span class="token string">&quot;git add&quot;</span> and/or <span class="token string">&quot;git commit -a&quot;</span><span class="token punctuation">)</span></span>
<span class="line">$ <span class="token function">git</span> commit <span class="token parameter variable">-a</span> <span class="token parameter variable">-m</span> <span class="token string">&#39;added new benchmarks&#39;</span></span>
<span class="line"><span class="token punctuation">[</span>master 83e38c7<span class="token punctuation">]</span> added new benchmarks</span>
<span class="line"> <span class="token number">1</span> <span class="token function">file</span> changed, <span class="token number">5</span> insertions<span class="token punctuation">(</span>+<span class="token punctuation">)</span>, <span class="token number">0</span> deletions<span class="token punctuation">(</span>-<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="移除文件" tabindex="-1"><a class="header-anchor" href="#移除文件"><span>移除文件</span></a></h1><p>要从 Git 中移除某个文件，就必须要从已跟踪文件清单中移除（确切地说，是从暂存区域移除），然后提交。 可以用 <code>git rm</code> 命令完成此项工作，并连带从工作目录中删除指定的文件，这样以后就不会出现在未跟踪文件清单中了。 如果只是简单地从工作目录中手工删除文件，运行 <code>git status</code> 时就会在 “Changes not staged for commit” 部分（也就是 <em>未暂存清单</em>）看到：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">rm</span> PROJECTS.md</span>
<span class="line">$ <span class="token function">git</span> status</span>
<span class="line">On branch master</span>
<span class="line">Your branch is up-to-date with <span class="token string">&#39;origin/master&#39;</span><span class="token builtin class-name">.</span></span>
<span class="line">Changes not staged <span class="token keyword">for</span> commit:</span>
<span class="line"><span class="token punctuation">(</span>use <span class="token string">&quot;git add/rm &lt;file&gt;...&quot;</span> to update what will be committed<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">(</span>use <span class="token string">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes <span class="token keyword">in</span> working directory<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">deleted:    PROJECTS.md</span>
<span class="line"></span>
<span class="line">no changes added to commit <span class="token punctuation">(</span>use <span class="token string">&quot;git add&quot;</span> and/or <span class="token string">&quot;git commit -a&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后再运行 <code>git rm</code> 记录此次移除文件的操作：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">git</span> <span class="token function">rm</span> PROJECTS.md</span>
<span class="line"><span class="token function">rm</span> <span class="token string">&#39;PROJECTS.md&#39;</span></span>
<span class="line">$ <span class="token function">git</span> status</span>
<span class="line">On branch master</span>
<span class="line">Your branch is up-to-date with <span class="token string">&#39;origin/master&#39;</span><span class="token builtin class-name">.</span></span>
<span class="line">Changes to be committed:</span>
<span class="line"><span class="token punctuation">(</span>use <span class="token string">&quot;git reset HEAD &lt;file&gt;...&quot;</span> to unstage<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    deleted:    PROJECTS.md</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下一次提交时，该文件就不再纳入版本管理了。 如果要删除之前修改过或已经放到暂存区的文件，则必须使用强制删除选项 <code>-f</code>（译注：即 force 的首字母）。 这是一种安全特性，用于防止误删尚未添加到快照的数据，这样的数据不能被 Git 恢复。 另外一种情况是，我们想把文件从 Git 仓库中删除（亦即从暂存区域移除），但仍然希望保留在当前工作目录中。 换句话说，你想让文件保留在磁盘，但是并不想让 Git 继续跟踪。 当你忘记添加 <code>.gitignore</code> 文件，不小心把一个很大的日志文件或一堆 <code>.a</code> 这样的编译生成文件添加到暂存区时，这一做法尤其有用。 为达到这一目的，使用 <code>--cached</code> 选项：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">git</span> <span class="token function">rm</span> <span class="token parameter variable">--cached</span> README</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>git rm</code> 命令后面可以列出文件或者目录的名字，也可以使用 <code>glob</code> 模式。比如：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">git</span> <span class="token function">rm</span> log/<span class="token punctuation">\\</span>*.log</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>注意到星号 <code>*</code> 之前的反斜杠 <code>\\</code>， 因为 Git 有它自己的文件模式扩展匹配方式，所以我们不用 shell 来帮忙展开。 此命令删除 <code>log/</code> 目录下扩展名为 <code>.log</code> 的所有文件。 类似的比如：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">git</span> <span class="token function">rm</span> <span class="token punctuation">\\</span>*~</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>该命令会删除所有名字以 <code>~</code> 结尾的文件。</p><h1 id="修改密码凭证" tabindex="-1"><a class="header-anchor" href="#修改密码凭证"><span>修改密码凭证</span></a></h1><p>查看当前用户名、邮箱、密码</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> config user.name</span>
<span class="line"><span class="token function">git</span> config user.email</span>
<span class="line"><span class="token function">git</span> config user.password</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改用户名、邮箱、密码方式</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">&quot;xxx(新的用户名)&quot;</span></span>
<span class="line"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">&quot;123456@163.com(新的邮箱)&quot;</span></span>
<span class="line"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.password <span class="token string">&quot;123456(新的密码)&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="移动文件" tabindex="-1"><a class="header-anchor" href="#移动文件"><span>移动文件</span></a></h1><p>不像其它的 VCS 系统，Git 并不显式跟踪文件移动操作。 如果在 Git 中重命名了某个文件，仓库中存储的元数据并不会体现出这是一次改名操作。 不过 Git 非常聪明，它会推断出究竟发生了什么，至于具体是如何做到的，我们稍后再谈。 既然如此，当你看到 Git 的 <code>mv</code> 命令时一定会困惑不已。 要在 Git 中对文件改名，可以这么做：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">git</span> <span class="token function">mv</span> file_from file_to</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>它会恰如预期般正常工作。 实际上，即便此时查看状态信息，也会明白无误地看到关于重命名操作的说明：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">git</span> <span class="token function">mv</span> README.md README</span>
<span class="line">$ <span class="token function">git</span> status</span>
<span class="line">On branch master</span>
<span class="line">Your branch is up-to-date with <span class="token string">&#39;origin/master&#39;</span><span class="token builtin class-name">.</span></span>
<span class="line">Changes to be committed:</span>
<span class="line"><span class="token punctuation">(</span>use <span class="token string">&quot;git reset HEAD &lt;file&gt;...&quot;</span> to unstage<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    renamed:    README.md -<span class="token operator">&gt;</span> README</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实，运行 <code>git mv</code> 就相当于运行了下面三条命令：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">mv</span> README.md README</span>
<span class="line">$ <span class="token function">git</span> <span class="token function">rm</span> README.md</span>
<span class="line">$ <span class="token function">git</span> <span class="token function">add</span> README</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如此分开操作，Git 也会意识到这是一次重命名，所以不管何种方式结果都一样。 两者唯一的区别是，<code>mv</code> 是一条命令而非三条命令，直接用 <code>git mv</code> 方便得多。 不过有时候用其他工具批处理重命名的话，要记得在提交前删除旧的文件名，再添加新的文件名。</p><h1 id="版本" tabindex="-1"><a class="header-anchor" href="#版本"><span>版本</span></a></h1><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> <span class="token parameter variable">--version</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h1 id="升级" tabindex="-1"><a class="header-anchor" href="#升级"><span>升级</span></a></h1><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> update-git-for-windows</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h1 id="本地项目上传至gitee仓库" tabindex="-1"><a class="header-anchor" href="#本地项目上传至gitee仓库"><span>本地项目上传至gitee仓库</span></a></h1><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">// 初始化git</span>
<span class="line"><span class="token function">git</span> init</span>
<span class="line"></span>
<span class="line">// 将本地代码库与远程代码库相关联</span>
<span class="line"><span class="token function">git</span> remote <span class="token function">add</span> origin https://gitee.com/ln_mars/spring-boot-mars</span>
<span class="line"></span>
<span class="line"><span class="token function">git</span> <span class="token function">add</span> <span class="token parameter variable">-A</span></span>
<span class="line"><span class="token function">git</span> pull</span>
<span class="line"><span class="token function">git</span> pull origin master</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="尚未推送到远程的提交" tabindex="-1"><a class="header-anchor" href="#尚未推送到远程的提交"><span>尚未推送到远程的提交</span></a></h1><p><strong>git cherry 找到本地提交列表中,尚未推送到远程的提交</strong></p><h2 id="_1-没有参数的情况" tabindex="-1"><a class="header-anchor" href="#_1-没有参数的情况"><span>1. 没有参数的情况</span></a></h2><p><code>git cherry</code> 默认比较HEAD本地分支和远程分支, 即当前分支和当前分支追踪的远程分支 如果存在差异,比较结果如下</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">+ 717cbc128c0e640f4f93ca8ad1118bd7f79ac728</span>
<span class="line">+ f92324d7c3f3a47afbbb4c3877b323320d2871d4</span>
<span class="line">+ edfaaede19bd2929b10505291266c772e9d1c934</span>
<span class="line">+ fa3100796735f970f6fb94d828a3e463fe5c6731</span>
<span class="line">+ be947b5a36a2102cea16c816b3b8fc8a2134ca63</span>
<span class="line">+ 31bb0cf8f7131be927cb023d31ee16dcd0639060</span>
<span class="line">+ c94061ea1ac16ebfe8e6388cb351a4c9329965d1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>git cherry -v</code> 可以展示出提交的注释信息</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">+ 717cbc128c0e640f4f93ca8ad1118bd7f79ac728 由于适应前端解析问题,返回一个string类型的userId</span>
<span class="line">+ f92324d7c3f3a47afbbb4c3877b323320d2871d4 返回签到记录</span>
<span class="line">+ edfaaede19bd2929b10505291266c772e9d1c934 读取plist配置获取默认背景逻辑编码</span>
<span class="line">+ fa3100796735f970f6fb94d828a3e463fe5c6731 读取plist配置获取默认背景逻辑编码</span>
<span class="line">+ be947b5a36a2102cea16c816b3b8fc8a2134ca63 harvest之后返回decoration<span class="token punctuation">;</span>重命名<span class="token punctuation">;</span></span>
<span class="line">+ 31bb0cf8f7131be927cb023d31ee16dcd0639060 读取plist配置获取默认背景逻辑编码</span>
<span class="line">+ c94061ea1ac16ebfe8e6388cb351a4c9329965d1 等级自动判断</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-一个参数的情况" tabindex="-1"><a class="header-anchor" href="#_2-一个参数的情况"><span>2. 一个参数的情况</span></a></h2><p><code>git cherry -v origin/master</code>可以比较本地HEAD分支和远程master分支之间的差别</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">+ 1f05a74c9a92e0faf5da96b17a7a15aa6c6e26e7 修复update的SQL错误</span>
<span class="line">+ ad78159f828a148c3d1581b44e2b32cb45464031 修复SQL错误</span>
<span class="line">+ 9d8a7471fb9408d7738b3a43f4f56a159619bfb0 增加逻辑:每次修改周期，保存一次未来提醒记录</span>
<span class="line">+ d618e16338d354830cb2ff2a0208d1502e705941 修复设置以前的日期时候可能导致的数组越界BUG</span>
<span class="line">+ 21d980972e6bcd73270d31b08852a6f62e72465c 预置推送消息增加推送人ID</span>
<span class="line">+ 741c64ef5f396dee29972e8f0684892b373f6aa7 修复SQL错误</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>git cherry -v origin/master</code> 可以比较本地HEAD分支和远程master分支之间的差别,等同于<code>git cherry -v origin/master HEAD</code><code>git cherry -v master</code> 可以比较本地HEAD分支和本地master分支之间的差别,等同于<code>git cherry -v master HEAD</code></p><h2 id="_3-两个参数的情况" tabindex="-1"><a class="header-anchor" href="#_3-两个参数的情况"><span>3. 两个参数的情况</span></a></h2><p><code>git cherry -v origin/master asa</code> 比较本地的asa分支和远程master的差别 <code>git cherry -v master asa</code> 比较本地asa分支和本地master分支之间的差别 <code>git cherry -v origin/master origin/asa</code> 比较远程asa分支和远程master的差别 <code>git cherry -v master origin/asa</code> 比较远程asa分支和本地master的差别。</p><h1 id="gitlab-fork项目更新" tabindex="-1"><a class="header-anchor" href="#gitlab-fork项目更新"><span>gitlab fork项目更新</span></a></h1><ol><li>查看目前仓库可以远程更新的信息</li></ol><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> remote <span class="token parameter variable">-v</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="2"><li>配置一个远程更新链接，要拥有git仓库访问权限的</li></ol><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> remote <span class="token function">add</span> upstream git@github.com:xxx/xxx.git</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="3"><li>拉取远程仓库的代码</li></ol><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> fetch upstream</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="4"><li>合并远程仓库的代码</li></ol><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> merge upstream/master</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="5"><li>把远程仓库的代码作为新源提交到自己的服务器仓库中</li></ol><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> push</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h1 id="常见问题" tabindex="-1"><a class="header-anchor" href="#常见问题"><span>常见问题</span></a></h1><h2 id="切换分支时报错-error-cannot-stat-file-permission-denied" tabindex="-1"><a class="header-anchor" href="#切换分支时报错-error-cannot-stat-file-permission-denied"><span>切换分支时报错： error: cannot stat ‘file’: Permission denied</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">git</span> checkout f-wangxiaoquan-uiDev</span>
<span class="line">error: cannot <span class="token function">stat</span> <span class="token string">&#39;src/modules/mbs/baseinfo/empmgt/emp-insu-reg&#39;</span><span class="token builtin class-name">:</span> Permission denied</span>
<span class="line">error: cannot <span class="token function">stat</span> <span class="token string">&#39;src/modules/mbs/baseinfo/empmgt/emp-insu-reg&#39;</span><span class="token builtin class-name">:</span> Permission denied</span>
<span class="line">error: cannot <span class="token function">stat</span> <span class="token string">&#39;src/modules/mbs/baseinfo/empmgt/emp-insu-reg&#39;</span><span class="token builtin class-name">:</span> Permission denied</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>error: cannot stat ‘file’: Permission denied 解决方法：退出编辑器、浏览器、资源管理器等，然后再切换就可以了。</p><h2 id="解决冲突" tabindex="-1"><a class="header-anchor" href="#解决冲突"><span>解决冲突</span></a></h2><p>1.退出合并状态</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> merge <span class="token parameter variable">--abort</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>2.本地解决冲突 查看本地状态可以看到哪些文件需要处理</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> status</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>3.将解决冲突的文件添加到本地暂存区</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> <span class="token function">add</span> filename</span>
<span class="line"></span>
<span class="line"><span class="token function">git</span> commit <span class="token parameter variable">-m</span> ”冲突“</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="git-撤销已经push的记录" tabindex="-1"><a class="header-anchor" href="#git-撤销已经push的记录"><span>git 撤销已经push的记录</span></a></h2><p>1.查看log</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> log</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>2.回退本地</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> reset <span class="token function">id</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>3.强行推到远程仓库</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> push <span class="token parameter variable">-f</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="gitignore文件并不生效" tabindex="-1"><a class="header-anchor" href="#gitignore文件并不生效"><span>.gitignore文件并不生效</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> <span class="token function">rm</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">--cached</span> <span class="token builtin class-name">.</span></span>
<span class="line"><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span></span>
<span class="line"><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;update .gitignore&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="git撤销commit" tabindex="-1"><a class="header-anchor" href="#git撤销commit"><span>git撤销commit</span></a></h2><p>修改了本地的代码，然后使用：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> <span class="token function">add</span> <span class="token function">file</span></span>
<span class="line"><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;修改原因&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>执行commit后，还没执行push时，想要撤销这次的commit，该怎么办？</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> reset <span class="token parameter variable">--soft</span> HEAD^</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这样就成功撤销了commit，如果想要连着add也撤销的话，–soft改为–hard（删除工作空间的改动代码） 命令详解： HEAD^ 表示上一个版本，即上一次的commit，也可以写成HEAD~1 如果进行两次的commit，想要都撤回，可以使用HEAD~2 –soft 不删除工作空间的改动代码 ，撤销commit，不撤销git add file –hard 删除工作空间的改动代码，撤销commit且撤销add</p><h2 id="commit注释修改" tabindex="-1"><a class="header-anchor" href="#commit注释修改"><span>commit注释修改</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> commit <span class="token parameter variable">--amend</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这时候会进入vim编辑器，修改完成你要的注释后保存即可。</p><h2 id="git-ssl-certificate-problem-unable-to-get-local-issuer-certificate" tabindex="-1"><a class="header-anchor" href="#git-ssl-certificate-problem-unable-to-get-local-issuer-certificate"><span>git SSL certificate problem: unable to get local issuer certificate</span></a></h2><p>原因：由于没有配置信任的服务器HTTPS验证。默认，cURL被设为不信任任何CAs，就是说，它不信任任何服务器验证 解决： 影响范围是系统当前用户</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> config <span class="token parameter variable">--global</span> http.sslVerify <span class="token boolean">false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>全局所有用户</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> config <span class="token parameter variable">--system</span> http.sslverify <span class="token boolean">false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>当前仓库</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> config http.sslverify <span class="token boolean">false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="tls-certificate-verification-has-been-disabled" tabindex="-1"><a class="header-anchor" href="#tls-certificate-verification-has-been-disabled"><span>TLS certificate verification has been disabled!</span></a></h2><p>原因：缺少了安全认证 解决：<code>git bash</code>下执行</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> config <span class="token parameter variable">--global</span> http.sslVerify <span class="token boolean">true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="git-add回退" tabindex="-1"><a class="header-anchor" href="#git-add回退"><span>git add回退</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment">#首先看看哪些文件加进去了  </span></span>
<span class="line"><span class="token function">git</span> status</span>
<span class="line"></span>
<span class="line"><span class="token comment">#回退git add所有文件  </span></span>
<span class="line"><span class="token function">git</span> reset HEAD</span>
<span class="line"></span>
<span class="line"><span class="token comment">#回退部分文件</span></span>
<span class="line"><span class="token function">git</span> reset HEAD <span class="token function">file</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="remote-the-project-you-were-looking-for-could-not-be-found" tabindex="-1"><a class="header-anchor" href="#remote-the-project-you-were-looking-for-could-not-be-found"><span>remote: The project you were looking for could not be found</span></a></h2><p>解决：在自己的项目路径上加上自己的用户名。（输入密码后即拉取代码成功）</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> clone http://用户名@125.01.02.03:10086/test/xiangmu.git</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,245))])}const b=t(o,[["render",m],["__file","01-Git使用.html.vue"]]),g=JSON.parse('{"path":"/docs/git/01-Git%E4%BD%BF%E7%94%A8.html","title":"Git 使用","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"基本命令","slug":"基本命令","link":"#基本命令","children":[{"level":3,"title":"初始化","slug":"初始化","link":"#初始化","children":[]},{"level":3,"title":"添加文件","slug":"添加文件","link":"#添加文件","children":[]},{"level":3,"title":"添加标签","slug":"添加标签","link":"#添加标签","children":[]},{"level":3,"title":"推送标签","slug":"推送标签","link":"#推送标签","children":[]},{"level":3,"title":"删除本地标签","slug":"删除本地标签","link":"#删除本地标签","children":[]},{"level":3,"title":"删除远端标签","slug":"删除远端标签","link":"#删除远端标签","children":[]},{"level":3,"title":"删除文件","slug":"删除文件","link":"#删除文件","children":[]},{"level":3,"title":"提交","slug":"提交","link":"#提交","children":[]},{"level":3,"title":"查看git库的状态","slug":"查看git库的状态","link":"#查看git库的状态","children":[]},{"level":3,"title":"比较","slug":"比较","link":"#比较","children":[]},{"level":3,"title":"查看日志","slug":"查看日志","link":"#查看日志","children":[]},{"level":3,"title":"版本回退","slug":"版本回退","link":"#版本回退","children":[]},{"level":3,"title":"查看命令历史","slug":"查看命令历史","link":"#查看命令历史","children":[]}]},{"level":2,"title":"分支管理","slug":"分支管理","link":"#分支管理","children":[{"level":3,"title":"查看分支","slug":"查看分支","link":"#查看分支","children":[]},{"level":3,"title":"创建分支","slug":"创建分支","link":"#创建分支","children":[]},{"level":3,"title":"切换分支","slug":"切换分支","link":"#切换分支","children":[]},{"level":3,"title":"创建分支并切换到创建的分支","slug":"创建分支并切换到创建的分支","link":"#创建分支并切换到创建的分支","children":[]},{"level":3,"title":"合并某分支的内容到当前分支","slug":"合并某分支的内容到当前分支","link":"#合并某分支的内容到当前分支","children":[]},{"level":3,"title":"删除分支","slug":"删除分支","link":"#删除分支","children":[]},{"level":3,"title":"查看分支合并图","slug":"查看分支合并图","link":"#查看分支合并图","children":[]}]},{"level":2,"title":"git远端库相关","slug":"git远端库相关","link":"#git远端库相关","children":[{"level":3,"title":"添加远端仓库","slug":"添加远端仓库","link":"#添加远端仓库","children":[]},{"level":3,"title":"移除远端仓库","slug":"移除远端仓库","link":"#移除远端仓库","children":[]},{"level":3,"title":"将本地仓库内容推送到远端仓库","slug":"将本地仓库内容推送到远端仓库","link":"#将本地仓库内容推送到远端仓库","children":[]},{"level":3,"title":"从远端库更新内容到本地","slug":"从远端库更新内容到本地","link":"#从远端库更新内容到本地","children":[]},{"level":3,"title":"从远程仓库抓取数据","slug":"从远程仓库抓取数据","link":"#从远程仓库抓取数据","children":[]},{"level":3,"title":"别名","slug":"别名","link":"#别名","children":[]}]},{"level":2,"title":"1. 没有参数的情况","slug":"_1-没有参数的情况","link":"#_1-没有参数的情况","children":[]},{"level":2,"title":"2. 一个参数的情况","slug":"_2-一个参数的情况","link":"#_2-一个参数的情况","children":[]},{"level":2,"title":"3. 两个参数的情况","slug":"_3-两个参数的情况","link":"#_3-两个参数的情况","children":[]},{"level":2,"title":"切换分支时报错： error: cannot stat ‘file’: Permission denied","slug":"切换分支时报错-error-cannot-stat-file-permission-denied","link":"#切换分支时报错-error-cannot-stat-file-permission-denied","children":[]},{"level":2,"title":"解决冲突","slug":"解决冲突","link":"#解决冲突","children":[]},{"level":2,"title":"git 撤销已经push的记录","slug":"git-撤销已经push的记录","link":"#git-撤销已经push的记录","children":[]},{"level":2,"title":".gitignore文件并不生效","slug":"gitignore文件并不生效","link":"#gitignore文件并不生效","children":[]},{"level":2,"title":"git撤销commit","slug":"git撤销commit","link":"#git撤销commit","children":[]},{"level":2,"title":"commit注释修改","slug":"commit注释修改","link":"#commit注释修改","children":[]},{"level":2,"title":"git SSL certificate problem: unable to get local issuer certificate","slug":"git-ssl-certificate-problem-unable-to-get-local-issuer-certificate","link":"#git-ssl-certificate-problem-unable-to-get-local-issuer-certificate","children":[]},{"level":2,"title":"TLS certificate verification has been disabled!","slug":"tls-certificate-verification-has-been-disabled","link":"#tls-certificate-verification-has-been-disabled","children":[]},{"level":2,"title":"git add回退","slug":"git-add回退","link":"#git-add回退","children":[]},{"level":2,"title":"remote: The project you were looking for could not be found","slug":"remote-the-project-you-were-looking-for-could-not-be-found","link":"#remote-the-project-you-were-looking-for-could-not-be-found","children":[]}],"git":{"updatedTime":1735118783000,"contributors":[{"name":"wangxiaoquan","email":"wxq","commits":2}]},"filePathRelative":"docs/git/01-Git使用.md"}');export{b as comp,g as data};
