import{_ as a,c as e,a as t,b as i,w as d,d as p,r as l,o as c,e as o}from"./app-CKtXyHQO.js";const r={},E={class:"table-of-contents"};function u(v,n){const s=l("router-link");return c(),e("div",null,[n[1]||(n[1]=t("h1",{id:"监听",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#监听"},[t("span",null,"监听")])],-1)),n[2]||(n[2]=t("p",null,[t("strong",null,"目录")],-1)),t("nav",E,[t("ul",null,[t("li",null,[i(s,{to:"#activitieventlistener"},{default:d(()=>n[0]||(n[0]=[o("ActivitiEventListener")])),_:1})])])]),n[3]||(n[3]=p(`<h2 id="activitieventlistener" tabindex="-1"><a class="header-anchor" href="#activitieventlistener"><span>ActivitiEventListener</span></a></h2><p>事件监听类型</p><table><thead><tr><th>监听类型</th><th>说明</th></tr></thead><tbody><tr><td>ENGINE_CREATED</td><td>监听器监听的流程引擎已经创建完毕，并准备好接受API调用。</td></tr><tr><td>ENGINE_CLOSED</td><td>监听器监听的流程引擎已经关闭，不再接受API调用。</td></tr><tr><td>ENTITY_CREATED</td><td>创建了一个新实体。实体包含在事件中。</td></tr><tr><td>ENTITY_INITIALIZED</td><td>创建了一个新实体，初始化也完成了。如果这个实体的创建会包含子实体的创建，这个事件会在子实体都创建/初始化完成后被触发，这是与ENTITY_CREATED的区别。</td></tr><tr><td>ENTITY_UPDATED</td><td>更新了已存在的实体。实体包含在事件中。</td></tr><tr><td>ENTITY_DELETED</td><td>删除了已存在的实体。实体包含在事件中。</td></tr><tr><td>ENTITY_SUSPENDED</td><td>暂停了已存在的实体。实体包含在事件中。会被ProcessDefinitions, ProcessInstances 和 Tasks抛出。</td></tr><tr><td>ENTITY_ACTIVATED</td><td>激活了已存在的实体，实体包含在事件中。会被ProcessDefinitions, ProcessInstances 和 Tasks抛出。</td></tr><tr><td>JOB_EXECUTION_SUCCESS</td><td>作业执行成功。job包含在事件中。</td></tr><tr><td>JOB_EXECUTION_FAILURE</td><td>作业执行失败。作业和异常信息包含在事件中。</td></tr><tr><td>JOB_RETRIES_DECREMENTED</td><td>因为作业执行失败，导致重试次数减少。作业包含在事件中。</td></tr><tr><td>TIMER_FIRED</td><td>触发了定时器。job包含在事件中。</td></tr><tr><td>JOB_CANCELED</td><td>取消了一个作业。事件包含取消的作业。作业可以通过API调用取消， 任务完成后对应的边界定时器也会取消，在新流程定义发布时也会取消。</td></tr><tr><td>ACTIVITY_STARTED</td><td>一个节点开始执行</td></tr><tr><td>ACTIVITY_COMPLETED</td><td>一个节点成功结束</td></tr><tr><td>ACTIVITY_SIGNALED</td><td>一个节点收到了一个信号</td></tr><tr><td>ACTIVITY_MESSAGE_RECEIVED</td><td>一个节点收到了一个消息。在节点收到消息之前触发。收到后，会触发ACTIVITY_SIGNAL或ACTIVITY_STARTED，这会根据节点的类型（边界事件，事件子流程开始事件）</td></tr><tr><td>ACTIVITY_ERROR_RECEIVED</td><td>一个节点收到了一个错误事件。在节点实际处理错误之前触发。 事件的activityId对应着处理错误的节点。 这个事件后续会是ACTIVITY_SIGNALLED或ACTIVITY_COMPLETE， 如果错误发送成功的话。</td></tr><tr><td>UNCAUGHT_BPMN_ERROR</td><td>抛出了未捕获的BPMN错误。流程没有提供针对这个错误的处理器。 事件的activityId为空。</td></tr><tr><td>ACTIVITY_COMPENSATE</td><td>一个节点将要被补偿。事件包含了将要执行补偿的节点id。</td></tr><tr><td>VARIABLE_CREATED</td><td>创建了一个变量。事件包含变量名，变量值和对应的分支或任务（如果存在）。</td></tr><tr><td>VARIABLE_UPDATED</td><td>更新了一个变量。事件包含变量名，变量值和对应的分支或任务（如果存在）。</td></tr><tr><td>VARIABLE_DELETED</td><td>删除了一个变量。事件包含变量名，变量值和对应的分支或任务（如果存在）。</td></tr><tr><td>TASK_ASSIGNED</td><td>任务被分配给了一个人员。事件包含任务。</td></tr><tr><td>TASK_CREATED</td><td>创建了新任务。它位于ENTITY_CREATE事件之后。当任务是由流程创建时， 这个事件会在TaskListener执行之前被执行。</td></tr><tr><td>TASK_COMPLETED</td><td>任务被完成了。它会在ENTITY_DELETE事件之前触发。当任务是流程一部分时，事件会在流程继续运行之前， 后续事件将是ACTIVITY_COMPLETE，对应着完成任务的节点。</td></tr><tr><td>TASK_TIMEOUT</td><td>任务已超时，在TIMER_FIRED事件之后，会触发用户任务的超时事件， 当这个任务分配了一个定时器的时候。</td></tr><tr><td>PROCESS_COMPLETED</td><td>流程已结束。在最后一个节点的ACTIVITY_COMPLETED事件之后触发。 当流程到达的状态，没有任何后续连线时， 流程就会结束。</td></tr><tr><td>PROCESS_CANCELLED</td><td>流程已经被取消。在流程实例从运行时中删除前分发。流程实例由API调用RuntimeService.deleteProcessInstance取消。</td></tr><tr><td>MEMBERSHIP_CREATED</td><td>用户被添加到一个组里。事件包含了用户和组的id。</td></tr><tr><td>MEMBERSHIP_DELETED</td><td>用户被从一个组中删除。事件包含了用户和组的id。</td></tr><tr><td>MEMBERSHIPS_DELETED</td><td>所有成员被从一个组中删除。在成员删除之前触发这个事件，所以他们都是可以访问的。 因为性能方面的考虑，不会为每个成员触发单独的MEMBERSHIP_DELETED事件。</td></tr></tbody></table><p>示例</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Slf4j</span></span>
<span class="line"><span class="token annotation punctuation">@Component</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ActivitiGlobalEventListener</span> <span class="token keyword">implements</span> <span class="token class-name">ActivitiEventListener</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * Called when an event has been fired</span>
<span class="line">     *</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">event</span> the event</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onEvent</span><span class="token punctuation">(</span><span class="token class-name">ActivitiEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">switch</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">case</span> <span class="token constant">PROCESS_COMPLETED</span><span class="token operator">:</span></span>
<span class="line">                <span class="token function">processCompleted</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">case</span> <span class="token constant">TASK_CREATED</span><span class="token operator">:</span></span>
<span class="line">                <span class="token function">taskCreated</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">default</span><span class="token operator">:</span></span>
<span class="line">                <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5))])}const k=a(r,[["render",u],["__file","02-监听.html.vue"]]),I=JSON.parse('{"path":"/docs/activiti/02-%E7%9B%91%E5%90%AC.html","title":"监听","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"ActivitiEventListener","slug":"activitieventlistener","link":"#activitieventlistener","children":[]}],"git":{"updatedTime":1739177390000,"contributors":[{"name":"wangxiaoquan","email":"wxq","commits":2}]},"filePathRelative":"docs/activiti/02-监听.md"}');export{k as comp,I as data};
