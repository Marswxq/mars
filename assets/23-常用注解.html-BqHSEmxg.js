import{_ as l,c,a as s,b as e,w as p,d as o,r as i,o as u,e as t}from"./app-CKtXyHQO.js";const d={},r={class:"table-of-contents"};function k(v,n){const a=i("router-link");return u(),c("div",null,[n[10]||(n[10]=s("h1",{id:"常用注解",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#常用注解"},[s("span",null,"常用注解")])],-1)),n[11]||(n[11]=s("p",null,[s("strong",null,"目录")],-1)),s("nav",r,[s("ul",null,[s("li",null,[e(a,{to:"#suppresswarnings"},{default:p(()=>n[0]||(n[0]=[t("@SuppressWarnings")])),_:1})]),s("li",null,[e(a,{to:"#bean"},{default:p(()=>n[1]||(n[1]=[t("@Bean")])),_:1})]),s("li",null,[e(a,{to:"#scope"},{default:p(()=>n[2]||(n[2]=[t("@Scope")])),_:1}),s("ul",null,[s("li",null,[e(a,{to:"#单例-singleton"},{default:p(()=>n[3]||(n[3]=[t("单例：singleton")])),_:1})]),s("li",null,[e(a,{to:"#多例-prototype"},{default:p(()=>n[4]||(n[4]=[t("多例：prototype")])),_:1})]),s("li",null,[e(a,{to:"#http请求-request"},{default:p(()=>n[5]||(n[5]=[t("HTTP请求：request")])),_:1})]),s("li",null,[e(a,{to:"#会话-session"},{default:p(()=>n[6]||(n[6]=[t("会话：session")])),_:1})])])]),s("li",null,[e(a,{to:"#primary"},{default:p(()=>n[7]||(n[7]=[t("@Primary")])),_:1})]),s("li",null,[e(a,{to:"#dependson"},{default:p(()=>n[8]||(n[8]=[t("@DependsOn")])),_:1})]),s("li",null,[e(a,{to:"#lazy"},{default:p(()=>n[9]||(n[9]=[t("@Lazy")])),_:1})])])]),n[12]||(n[12]=o(`<h2 id="suppresswarnings" tabindex="-1"><a class="header-anchor" href="#suppresswarnings"><span>@SuppressWarnings</span></a></h2><p>用于抑制编译器产生警告信息。</p><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>@SuppressWarnings(“unchecked”)</td><td>抑制未检查的转化，例如集合没有指定类型的警告</td></tr><tr><td>@SuppressWarnings(“unused”)</td><td>抑制未使用的变量的警告</td></tr><tr><td>@SuppressWarnings(“resource”)</td><td>抑制与使用Closeable类型资源相关的警告</td></tr><tr><td>@SuppressWarnings(“path”)</td><td>抑制在类路径，原文件路径中有不存在的路径的警告</td></tr><tr><td>@SuppressWarnings(“path”)</td><td>抑制在类路径，原文件路径中有不存在的路径的警告</td></tr><tr><td>@SuppressWarnings(&quot;deprecation&quot;)</td><td>抑制使用了某些不赞成使用的类和方法的警告</td></tr><tr><td>@SuppressWarnings(&quot;fallthrough&quot;)</td><td>抑制switch语句执行到底没有break关键字的警告</td></tr><tr><td>@SuppressWarnings(&quot;serial&quot;)</td><td>抑制某类实现Serializable，但是没有定义serialVersionUID，这个需要但是不必须的字段的警告</td></tr><tr><td>@SuppressWarnings(&quot;rawtypes&quot;)</td><td>抑制没有传递带有泛型的参数的警告</td></tr><tr><td>@SuppressWarnings(&quot;all&quot;)</td><td>抑制全部类型的警告</td></tr></tbody></table><h2 id="bean" tabindex="-1"><a class="header-anchor" href="#bean"><span>@Bean</span></a></h2><p><code>@Bean</code>用于标记工厂方法，用于实例化 Spring Bean：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Bean</span></span>
<span class="line"><span class="token class-name">Engine</span> <span class="token function">engine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Engine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生成的 Bean 的名称与工厂方法的名称相同。如果想使用不同的名称，可以使用此注解的 name 或 value 参数（value 是 name 的别名）：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;engine&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token class-name">Engine</span> <span class="token function">getEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Engine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong>，<u>所有注解为<code>@Bean</code>的方法必须位于<code>@Configuration</code>类中</u>。</p><h2 id="scope" tabindex="-1"><a class="header-anchor" href="#scope"><span>@Scope</span></a></h2><p>源码走一波</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * When used as a type-level annotation in conjunction with</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span> @Component<span class="token punctuation">}</span>,</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token annotation punctuation">@Scope</span></span></span><span class="token punctuation">}</span> indicates the name of a scope to use for instances of</span>
<span class="line"> * the annotated type.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>When used as a method-level annotation in conjunction with</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Bean</span></span> @Bean<span class="token punctuation">}</span>, <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token annotation punctuation">@Scope</span></span></span><span class="token punctuation">}</span> indicates the name of a scope to use</span>
<span class="line"> * for the instance returned from the method.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>NOTE:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token annotation punctuation">@Scope</span></span></span><span class="token punctuation">}</span> annotations are only introspected on the</span>
<span class="line"> * concrete bean class (for annotated components) or the factory method</span>
<span class="line"> * (for <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token annotation punctuation">@Bean</span></span></span><span class="token punctuation">}</span> methods). In contrast to XML bean definitions,</span>
<span class="line"> * there is no notion of bean definition inheritance, and inheritance</span>
<span class="line"> * hierarchies at the class level are irrelevant for metadata purposes.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>In this context, <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">&gt;</span></span>scope<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">&gt;</span></span> means the lifecycle of an instance,</span>
<span class="line"> * such as <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">singleton</span></span><span class="token punctuation">}</span>, <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">prototype</span></span><span class="token punctuation">}</span>, and so forth. Scopes</span>
<span class="line"> * provided out of the box in Spring may be referred to using the</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token constant">SCOPE_</span><span class="token operator">*</span></span></span><span class="token punctuation">}</span> constants available in the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ConfigurableBeanFactory</span></span><span class="token punctuation">}</span></span>
<span class="line"> * and <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">WebApplicationContext</span></span></span><span class="token punctuation">}</span> interfaces.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>To register additional custom scopes, see</span>
<span class="line"> * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">CustomScopeConfigurer</span></span></span>
<span class="line"> * CustomScopeConfigurer<span class="token punctuation">}</span>.</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@author</span> Mark Fisher</span>
<span class="line"> * <span class="token keyword">@author</span> Chris Beams</span>
<span class="line"> * <span class="token keyword">@author</span> Sam Brannen</span>
<span class="line"> * <span class="token keyword">@since</span> 2.5</span>
<span class="line"> * <span class="token keyword">@see</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span></span>
<span class="line"> * <span class="token keyword">@see</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span></span>
<span class="line"> */</span></span>
<span class="line"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation punctuation">@Documented</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Scope</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">	<span class="token doc-comment comment">/**</span>
<span class="line">	 * Alias for <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">scopeName</span></span><span class="token punctuation">}</span>.</span>
<span class="line">	 * <span class="token keyword">@see</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">scopeName</span></span></span>
<span class="line">	 */</span></span>
<span class="line">	<span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span><span class="token string">&quot;scopeName&quot;</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">	<span class="token doc-comment comment">/**</span>
<span class="line">	 * Specifies the name of the scope to use for the annotated component/bean.</span>
<span class="line">	 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Defaults to an empty string (<span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token string">&quot;&quot;</span></span></span><span class="token punctuation">}</span>) which implies</span>
<span class="line">	 * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ConfigurableBeanFactory</span><span class="token punctuation">#</span><span class="token field">SCOPE_SINGLETON</span></span> SCOPE_SINGLETON<span class="token punctuation">}</span>.</span>
<span class="line">	 * <span class="token keyword">@since</span> 4.2</span>
<span class="line">	 * <span class="token keyword">@see</span> <span class="token reference"><span class="token class-name">ConfigurableBeanFactory</span><span class="token punctuation">#</span><span class="token field">SCOPE_PROTOTYPE</span></span></span>
<span class="line">	 * <span class="token keyword">@see</span> <span class="token reference"><span class="token class-name">ConfigurableBeanFactory</span><span class="token punctuation">#</span><span class="token field">SCOPE_SINGLETON</span></span></span>
<span class="line">	 * <span class="token keyword">@see</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">WebApplicationContext</span><span class="token punctuation">#</span><span class="token field">SCOPE_REQUEST</span></span></span>
<span class="line">	 * <span class="token keyword">@see</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">WebApplicationContext</span><span class="token punctuation">#</span><span class="token field">SCOPE_SESSION</span></span></span>
<span class="line">	 * <span class="token keyword">@see</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">value</span></span></span>
<span class="line">	 */</span></span>
<span class="line">	<span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span><span class="token string">&quot;value&quot;</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token class-name">String</span> <span class="token function">scopeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">	<span class="token doc-comment comment">/**</span>
<span class="line">	 * Specifies whether a component should be configured as a scoped proxy</span>
<span class="line">	 * and if so, whether the proxy should be interface-based or subclass-based.</span>
<span class="line">	 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Defaults to <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ScopedProxyMode</span><span class="token punctuation">#</span><span class="token field">DEFAULT</span></span><span class="token punctuation">}</span>, which typically indicates</span>
<span class="line">	 * that no scoped proxy should be created unless a different default</span>
<span class="line">	 * has been configured at the component-scan instruction level.</span>
<span class="line">	 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Analogous to <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token operator">&lt;</span>aop<span class="token operator">:</span>scoped<span class="token operator">-</span>proxy<span class="token operator">/</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">}</span> support in Spring XML.</span>
<span class="line">	 * <span class="token keyword">@see</span> <span class="token reference"><span class="token class-name">ScopedProxyMode</span></span></span>
<span class="line">	 */</span></span>
<span class="line">	<span class="token class-name">ScopedProxyMode</span> <span class="token function">proxyMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">ScopedProxyMode</span><span class="token punctuation">.</span><span class="token constant">DEFAULT</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>大致理解：</p><blockquote><p>当与 @Component 一起用作类型级批注时，@Scope 指示用于批注类型实例的作用域的名称。当与 @Bean 一起用作方法级批注时，@Scope 指示要用于从方法返回的实例的作用域的名称。</p><p>注意：@Scope注释仅在 concrete bean 类（对于带注释的元件）或工厂方法（对于@Bean方法）上进行内省。与 XML Bean 定义相比，没有 Bean 定义继承的概念，类级别的继承层次结构与元数据无关。</p><p>在此上下文中，范围是指实例的生命周期，例如单例、原型等。Spring 中开箱即用的范围可以使用 ConfigurableBeanFactory 和 WebApplicationContext 接口中提供的SCOPE_常量来引用。</p><p>常用于更改Spring中Bean的作用域。</p></blockquote><h3 id="单例-singleton" tabindex="-1"><a class="header-anchor" href="#单例-singleton"><span>单例：singleton</span></a></h3><blockquote><p>Spring中Bean的默认作用域。</p></blockquote><h3 id="多例-prototype" tabindex="-1"><a class="header-anchor" href="#多例-prototype"><span>多例：prototype</span></a></h3><blockquote><p>prototype非常适合有状态的Bean，每个实例都可以保存独立于其他实例的数据。</p><p>常用<code>ConfigurableBeanFactory.SCOPE_PROTOTYPE</code>指定。</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestScope</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@NoArgsConstructor</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScopeClass</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Bean</span></span>
<span class="line">    <span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableBeanFactory</span><span class="token punctuation">.</span><span class="token constant">SCOPE_PROTOTYPE</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">ScopeClass</span> <span class="token function">scopeClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ScopeClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="http请求-request" tabindex="-1"><a class="header-anchor" href="#http请求-request"><span>HTTP请求：request</span></a></h3><blockquote><p>每个HTTP请求时创建该Bean的新实例。</p><p>注意：被request标记的bean不能在多个请求之间被共享</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestScope</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@NoArgsConstructor</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScopeClass</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 方式一</span></span>
<span class="line">    <span class="token annotation punctuation">@Bean</span></span>
<span class="line">    <span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">WebApplicationContext</span><span class="token punctuation">.</span><span class="token constant">SCOPE_REQUEST</span><span class="token punctuation">,</span> proxyMode <span class="token operator">=</span> <span class="token class-name">ScopedProxyMode</span><span class="token punctuation">.</span><span class="token constant">TARGET_CLASS</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">ScopeClass</span> <span class="token function">scopeClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ScopeClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 方式二</span></span>
<span class="line">    <span class="token annotation punctuation">@Bean</span></span>
<span class="line">    <span class="token annotation punctuation">@RequestScope</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">ScopeClass</span> <span class="token function">scopeClassRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ScopeClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="会话-session" tabindex="-1"><a class="header-anchor" href="#会话-session"><span>会话：session</span></a></h3><blockquote><p>每个HTTP session创建Bean的实例</p><p>注意：可以理解为一个用户第一次访问时创建，关闭浏览器时回收。</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestScope</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@NoArgsConstructor</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScopeClass</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 方式一</span></span>
<span class="line">    <span class="token annotation punctuation">@Bean</span></span>
<span class="line">    <span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">WebApplicationContext</span><span class="token punctuation">.</span><span class="token constant">SCOPE_SESSION</span><span class="token punctuation">,</span> proxyMode <span class="token operator">=</span> <span class="token class-name">ScopedProxyMode</span><span class="token punctuation">.</span><span class="token constant">TARGET_CLASS</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">ScopeClass</span> <span class="token function">scopeClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ScopeClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 方式二</span></span>
<span class="line">    <span class="token annotation punctuation">@Bean</span></span>
<span class="line">    <span class="token annotation punctuation">@SessionScope</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">ScopeClass</span> <span class="token function">scopeClassRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ScopeClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="primary" tabindex="-1"><a class="header-anchor" href="#primary"><span>@Primary</span></a></h2><p>Spring Bean 有时需要多个实现类实现同一个接口，在这种情况下，注入将不会成功，因为 Spring 不知道需要注入哪个 Bean。 这种情况下可以将最常用的 Bean 标记为<code>@Primary</code>，它将在未标记<code>@Qualifier</code>的注入点上被选中，即被<code>@Primary</code>标记的 Bean 会作为默认类型注入。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Component</span></span>
<span class="line"><span class="token annotation punctuation">@Primary</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token keyword">implements</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@Component</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Bike</span> <span class="token keyword">implements</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@Component</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Driver</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Autowired</span></span>
<span class="line">    <span class="token class-name">Vehicle</span> vehicle<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@Component</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Biker</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Autowired</span></span>
<span class="line">    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;bike&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token class-name">Vehicle</span> vehicle<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="dependson" tabindex="-1"><a class="header-anchor" href="#dependson"><span>@DependsOn</span></a></h2><p>可以使用此注解让 Spring 在注解的 Bean 之前初始化其他 Bean。通常情况下，这种行为是自动进行的，基于 Bean 之间的显式依赖关系。</p><p>只有当依赖关系是隐式的，例如 JDBC 驱动加载或静态变量初始化时，才需要此注解。</p><p>可以在依赖类上使用<code>@DependsOn</code>来指定依赖 Bean 的名称。注解的 value 参数需要一个包含依赖 Bean 名称的数组：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@DependsOn</span><span class="token punctuation">(</span><span class="token string">&quot;engine&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token keyword">implements</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>或者，如果我们使用 @Bean 注解定义 Bean，那么就应该在工厂方法上使用 @DependsOn 注解：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Bean</span></span>
<span class="line"><span class="token annotation punctuation">@DependsOn</span><span class="token punctuation">(</span><span class="token string">&quot;fuel&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token class-name">Engine</span> <span class="token function">engine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Engine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="lazy" tabindex="-1"><a class="header-anchor" href="#lazy"><span>@Lazy</span></a></h2><p>当我们希望<strong>延迟</strong>初始化 Bean 时，可以使用<code>@Lazy</code>注解。默认情况下，Spring 在 Application Context 启动时会立即创建所有 Singleton（单例）Bean。</p><p>不过，在某些情况下，我们需要在使用时创建 Bean，而不是在应用启动时。</p><p>这个注解会根据具体标注位置而有不同的表现，可以用在如下位置：</p><ul><li><code>@Bean</code>注解的 Bean 工厂方法，可以延迟方法调用（从而延迟 Bean 的创建）。</li><li><code>@Configuration</code>类，包含的 @Bean 方法都将受到影响</li><li><code>@Component</code>类，而该组件类不是 @Configuration 类，则该 Bean 将被延迟地初始化</li><li><code>@Autowired</code>构造函数、Setter 方法或字段，用于延迟地（通过代理）加载依赖本身</li></ul><p>该注解有一个名为 value 的参数，默认值为 true。它可以覆盖默认行为。</p><p>例如，当全局设置为懒加载（lazy）时，可以标记要立即加载的 Bean，或者在使用<code>@Lazy</code>标记的<code>@Configuration</code>类中，配置特定的<code>@Bean</code> 方法以进行立即加载：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token annotation punctuation">@Lazy</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">VehicleFactoryConfig</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Bean</span></span>
<span class="line">    <span class="token annotation punctuation">@Lazy</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>  <span class="token comment">// 立即加载</span></span>
<span class="line">    <span class="token class-name">Engine</span> <span class="token function">engine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Engine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,43))])}const b=l(d,[["render",k],["__file","23-常用注解.html.vue"]]),g=JSON.parse('{"path":"/docs/java/23-%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3.html","title":"常用注解","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"@SuppressWarnings","slug":"suppresswarnings","link":"#suppresswarnings","children":[]},{"level":2,"title":"@Bean","slug":"bean","link":"#bean","children":[]},{"level":2,"title":"@Scope","slug":"scope","link":"#scope","children":[{"level":3,"title":"单例：singleton","slug":"单例-singleton","link":"#单例-singleton","children":[]},{"level":3,"title":"多例：prototype","slug":"多例-prototype","link":"#多例-prototype","children":[]},{"level":3,"title":"HTTP请求：request","slug":"http请求-request","link":"#http请求-request","children":[]},{"level":3,"title":"会话：session","slug":"会话-session","link":"#会话-session","children":[]}]},{"level":2,"title":"@Primary","slug":"primary","link":"#primary","children":[]},{"level":2,"title":"@DependsOn","slug":"dependson","link":"#dependson","children":[]},{"level":2,"title":"@Lazy","slug":"lazy","link":"#lazy","children":[]}],"git":{"updatedTime":1748510325000,"contributors":[{"name":"wangxiaoquan","email":"wxq","commits":2}]},"filePathRelative":"docs/java/23-常用注解.md"}');export{b as comp,g as data};
