import{_ as o,c,a as s,b as p,w as t,d as l,r as i,o as u,e}from"./app-CKtXyHQO.js";const r={},k={class:"table-of-contents"};function d(v,n){const a=i("router-link");return u(),c("div",null,[n[8]||(n[8]=s("h1",{id:"webmvcconfigurationsupport",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#webmvcconfigurationsupport"},[s("span",null,"WebMvcConfigurationSupport")])],-1)),n[9]||(n[9]=s("p",null,[s("strong",null,"目录")],-1)),s("nav",k,[s("ul",null,[s("li",null,[p(a,{to:"#webmvc-拦截器等-配置失效"},{default:t(()=>n[0]||(n[0]=[e("WebMvc（拦截器等）配置失效")])),_:1}),s("ul",null,[s("li",null,[p(a,{to:"#失效原因"},{default:t(()=>n[1]||(n[1]=[e("失效原因")])),_:1})]),s("li",null,[p(a,{to:"#解决方法"},{default:t(()=>n[2]||(n[2]=[e("解决方法")])),_:1})])])]),s("li",null,[p(a,{to:"#jackson日期格式化失效"},{default:t(()=>n[3]||(n[3]=[e("Jackson日期格式化失效")])),_:1}),s("ul",null,[s("li",null,[p(a,{to:"#未使用webmvcconfigurationsupport的解决方案"},{default:t(()=>n[4]||(n[4]=[e("未使用WebMvcConfigurationSupport的解决方案")])),_:1})]),s("li",null,[p(a,{to:"#使用webmvcconfigurationsupport的解决方案"},{default:t(()=>n[5]||(n[5]=[e("使用WebMvcConfigurationSupport的解决方案")])),_:1})])])]),s("li",null,[p(a,{to:"#objectmapper-bean失效"},{default:t(()=>n[6]||(n[6]=[e("ObjectMapper Bean失效")])),_:1})]),s("li",null,[p(a,{to:"#demo"},{default:t(()=>n[7]||(n[7]=[e("DEMO")])),_:1})])])]),n[10]||(n[10]=l(`<h2 id="webmvc-拦截器等-配置失效" tabindex="-1"><a class="header-anchor" href="#webmvc-拦截器等-配置失效"><span>WebMvc（拦截器等）配置失效</span></a></h2><p>WebMvcConfigurationSupport是WebMvc的配置类，如果在springboot项目中，有配置类继承了WebMvcConfigurationSupport，那么WebMvc的自动配置类WebMvcAutoConfiguration就会失效。</p><h3 id="失效原因" tabindex="-1"><a class="header-anchor" href="#失效原因"><span>失效原因</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token annotation punctuation">@ConditionalOnWebApplication</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">Type</span><span class="token punctuation">.</span><span class="token constant">SERVLET</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token class-name">Servlet</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">DispatcherServlet</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">WebMvcConfigurer</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token class-name">WebMvcConfigurationSupport</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation punctuation">@AutoConfigureOrder</span><span class="token punctuation">(</span><span class="token class-name">Ordered</span><span class="token punctuation">.</span><span class="token constant">HIGHEST_PRECEDENCE</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation punctuation">@AutoConfigureAfter</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token class-name">DispatcherServletAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span></span>
<span class="line">		<span class="token class-name">ValidationAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebMvcAutoConfiguration</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在WebMvcAutoConfiguration类上面的注解中可以看到有一条注解：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token class-name">WebMvcConfigurationSupport</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>该注解表示只有当spring的容器中没有装载继承了WebMvcConfigurationSupport类型的bean时，自动配置类才会生效。WebMvc自动配置类中不仅定义了classpath: /META-INF/resources/，classpath:/resources/，classpath:/static/，classpath:/public/等路径的映射，还定义了配置文件spring.mvc开头的配置信息等。</p><h3 id="解决方法" tabindex="-1"><a class="header-anchor" href="#解决方法"><span>解决方法</span></a></h3><p>如果想要使用自动配置生效，又要按自己的需要重写某些方法，比如增加拦截器。那么将配置类继承WebMvcConfigurationSupport改为实现WebMvcConfigurer接口即可。</p><h2 id="jackson日期格式化失效" tabindex="-1"><a class="header-anchor" href="#jackson日期格式化失效"><span>Jackson日期格式化失效</span></a></h2><p>Spring默认使用Jackson作为序列化工具，如果没有任何配置，在序列化接口参数时，解析Date类型参数时就会报错。</p><h3 id="未使用webmvcconfigurationsupport的解决方案" tabindex="-1"><a class="header-anchor" href="#未使用webmvcconfigurationsupport的解决方案"><span>未使用WebMvcConfigurationSupport的解决方案</span></a></h3><p>增加配置</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">spring</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">jackson</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">date-format</span><span class="token punctuation">:</span> yyyy<span class="token punctuation">-</span>MM<span class="token punctuation">-</span>dd HH<span class="token punctuation">:</span>mm<span class="token punctuation">:</span>ss</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用webmvcconfigurationsupport的解决方案" tabindex="-1"><a class="header-anchor" href="#使用webmvcconfigurationsupport的解决方案"><span>使用WebMvcConfigurationSupport的解决方案</span></a></h3><p>需要重写WMCS的configureMessageConverters()方法</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 实现自定义日期格式化</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configureMessageConverters</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpMessageConverter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> converters<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpMessageConverter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> messageConverters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">addDefaultHttpMessageConverters</span><span class="token punctuation">(</span>messageConverters<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">HttpMessageConverter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> mc <span class="token operator">:</span> messageConverters<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>mc <span class="token keyword">instanceof</span> <span class="token class-name">MappingJackson2HttpMessageConverter</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">MappingJackson2HttpMessageConverter</span> mc1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">MappingJackson2HttpMessageConverter</span><span class="token punctuation">)</span> mc<span class="token punctuation">;</span></span>
<span class="line">                <span class="token class-name">ObjectMapper</span> objectMapper <span class="token operator">=</span> mc1<span class="token punctuation">.</span><span class="token function">getObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                objectMapper<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">DeserializationFeature</span><span class="token punctuation">.</span><span class="token constant">FAIL_ON_UNKNOWN_PROPERTIES</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                objectMapper<span class="token punctuation">.</span><span class="token function">setDateFormat</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token class-name">IfmConstants</span><span class="token punctuation">.</span><span class="token constant">DEFAULT_DATE_FORMAT</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            converters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>mc<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="objectmapper-bean失效" tabindex="-1"><a class="header-anchor" href="#objectmapper-bean失效"><span>ObjectMapper Bean失效</span></a></h2><p>与Jackson问题一样，WMCS也不会用Spring维护的ObjectMapperBean实例，而是自己创建了一个ObjectMapper。</p><h2 id="demo" tabindex="-1"><a class="header-anchor" href="#demo"><span>DEMO</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Configurer</span> <span class="token keyword">extends</span> <span class="token class-name">WebMvcConfigurationSupport</span><span class="token punctuation">{</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">//自定义的一个拦截器</span></span>
<span class="line">    <span class="token annotation punctuation">@Autowired</span></span>
<span class="line">    <span class="token class-name">HttpInterceptor</span> httpInterceptor<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">//定义时间格式转换器</span></span>
<span class="line">    <span class="token annotation punctuation">@Bean</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">MappingJackson2HttpMessageConverter</span> <span class="token function">jackson2HttpMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">MappingJackson2HttpMessageConverter</span> converter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MappingJackson2HttpMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">ObjectMapper</span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        mapper<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">DeserializationFeature</span><span class="token punctuation">.</span><span class="token constant">FAIL_ON_UNKNOWN_PROPERTIES</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        mapper<span class="token punctuation">.</span><span class="token function">setDateFormat</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        converter<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span>mapper<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> converter<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//添加转换器</span></span>
<span class="line">    <span class="token comment">//配置springmvc返回数据时 输出数据的格式，这里只配置了时间的输出格式</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureMessageConverters</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpMessageConverter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> converters<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//将我们定义的时间格式转换器添加到转换器列表中,</span></span>
<span class="line">        <span class="token comment">//这样jackson格式化时候但凡遇到Date类型就会转换成我们定义的格式</span></span>
<span class="line">        converters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">jackson2HttpMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// TODO Auto-generated method stub</span></span>
<span class="line">        <span class="token comment">//将我们自定义的拦截器注册到配置中 </span></span>
<span class="line">        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>httpInterceptor<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">&quot;/**&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">addInterceptors</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span>   </span>
<span class="line">	</span>
<span class="line"></span>
<span class="line">	<span class="token doc-comment comment">/**</span>
<span class="line">     * 防止@EnableMvc把默认的静态资源路径覆盖了，手动设置的方式</span>
<span class="line">     * 配置了静态资源访问</span>
<span class="line">     * 还能配置视图解析 访问服务器上的资源</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">registry</span></span>
<span class="line">     */</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">addResourceHandlers</span><span class="token punctuation">(</span><span class="token class-name">ResourceHandlerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 解决静态资源无法访问</span></span>
<span class="line">        registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">&quot;/**&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:/static/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//配置视图解析，把url中后面带/image/***的路径映射到c盘photo文件中的资源</span></span>
<span class="line">       	registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">&quot;/image/**&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">&quot;file:C://photo/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">addResourceHandlers</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//配置服务器跨域请求被允许</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addCorsMappings</span><span class="token punctuation">(</span><span class="token class-name">CorsRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        registry<span class="token punctuation">.</span><span class="token function">addMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/**&quot;</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">allowedOrigins</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;POST&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;PUT&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;OPTIONS&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;DELETE&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;PATCH&quot;</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">allowCredentials</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">maxAge</span><span class="token punctuation">(</span><span class="token number">3600</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21))])}const b=o(r,[["render",d],["__file","13-WebMvcConfigurationSupport.html.vue"]]),g=JSON.parse('{"path":"/docs/java/13-WebMvcConfigurationSupport.html","title":"WebMvcConfigurationSupport","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"WebMvc（拦截器等）配置失效","slug":"webmvc-拦截器等-配置失效","link":"#webmvc-拦截器等-配置失效","children":[{"level":3,"title":"失效原因","slug":"失效原因","link":"#失效原因","children":[]},{"level":3,"title":"解决方法","slug":"解决方法","link":"#解决方法","children":[]}]},{"level":2,"title":"Jackson日期格式化失效","slug":"jackson日期格式化失效","link":"#jackson日期格式化失效","children":[{"level":3,"title":"未使用WebMvcConfigurationSupport的解决方案","slug":"未使用webmvcconfigurationsupport的解决方案","link":"#未使用webmvcconfigurationsupport的解决方案","children":[]},{"level":3,"title":"使用WebMvcConfigurationSupport的解决方案","slug":"使用webmvcconfigurationsupport的解决方案","link":"#使用webmvcconfigurationsupport的解决方案","children":[]}]},{"level":2,"title":"ObjectMapper Bean失效","slug":"objectmapper-bean失效","link":"#objectmapper-bean失效","children":[]},{"level":2,"title":"DEMO","slug":"demo","link":"#demo","children":[]}],"git":{"updatedTime":1734338014000,"contributors":[{"name":"wangxiaoquan","email":"wxq","commits":1}]},"filePathRelative":"docs/java/13-WebMvcConfigurationSupport.md"}');export{b as comp,g as data};
